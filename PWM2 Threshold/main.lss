
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000c16  00000caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080006a  0080006a  00000cb4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003be  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f69  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035c  00000000  00000000  00001ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ccc  00000000  00000000  00002357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00003024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000652  00000000  00000000  00003777  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 88 03 	call	0x710	; 0x710 <main>
  8a:	0c 94 09 06 	jmp	0xc12	; 0xc12 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
#define threshold 100

//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
  96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
  98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
  9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
  9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
  9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
  a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
  a2:	11 ba       	out	0x11, r1	; 17
}
  a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
  a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
  a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
  aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
  ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
  ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
  b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
  b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
  b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
  b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
  bc:	8f e8       	ldi	r24, 0x8F	; 143
  be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
  c0:	82 ea       	ldi	r24, 0xA2	; 162
  c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
  c4:	89 e1       	ldi	r24, 0x19	; 25
  c6:	8e bd       	out	0x2e, r24	; 46
}
  c8:	08 95       	ret

000000ca <pwm2_init>:
{
/*PWM2_DIR=1;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;*/
TCCR2=0x69;
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	85 bd       	out	0x25, r24	; 37
}
  ce:	08 95       	ret

000000d0 <pwm0_init>:
/*
PWM0_DIR=1;
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;*/
TCCR0=0x69;
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	83 bf       	out	0x33, r24	; 51
}
  d4:	08 95       	ret

000000d6 <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
  d6:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
  d8:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
  de:	87 e8       	ldi	r24, 0x87	; 135
  e0:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	88 b9       	out	0x08, r24	; 8
}
  e6:	08 95       	ret

000000e8 <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
  e8:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
  ea:	87 70       	andi	r24, 0x07	; 7
  ec:	80 66       	ori	r24, 0x60	; 96
  ee:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
  f0:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
  f2:	36 99       	sbic	0x06, 6	; 6
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
  f6:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
  f8:	08 95       	ret

000000fa <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
  fa:	ac 01       	movw	r20, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fe:	60 e9       	ldi	r22, 0x90	; 144
 100:	71 e0       	ldi	r23, 0x01	; 1
 102:	0c c0       	rjmp	.+24     	; 0x11c <delay_sec+0x22>
 104:	fb 01       	movw	r30, r22
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10c:	d9 f7       	brne	.-10     	; 0x104 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	24 30       	cpi	r18, 0x04	; 4
 112:	19 f0       	breq	.+6      	; 0x11a <delay_sec+0x20>
 114:	84 ec       	ldi	r24, 0xC4	; 196
 116:	99 e0       	ldi	r25, 0x09	; 9
 118:	f5 cf       	rjmp	.-22     	; 0x104 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
 11a:	3f 5f       	subi	r19, 0xFF	; 255
 11c:	83 2f       	mov	r24, r19
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	84 17       	cp	r24, r20
 122:	95 07       	cpc	r25, r21
 124:	14 f4       	brge	.+4      	; 0x12a <delay_sec+0x30>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	f5 cf       	rjmp	.-22     	; 0x114 <delay_sec+0x1a>
 12a:	08 95       	ret

0000012c <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
	_delay_ms(n);
 13c:	aa 27       	eor	r26, r26
 13e:	97 fd       	sbrc	r25, 7
 140:	a0 95       	com	r26
 142:	ba 2f       	mov	r27, r26
 144:	bc 01       	movw	r22, r24
 146:	cd 01       	movw	r24, r26
 148:	0e 94 b6 04 	call	0x96c	; 0x96c <__floatsisf>
 14c:	5b 01       	movw	r10, r22
 14e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	4a e7       	ldi	r20, 0x7A	; 122
 156:	55 e4       	ldi	r21, 0x45	; 69
 158:	0e 94 6a 05 	call	0xad4	; 0xad4 <__mulsf3>
 15c:	7b 01       	movw	r14, r22
 15e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e8       	ldi	r20, 0x80	; 128
 166:	5f e3       	ldi	r21, 0x3F	; 63
 168:	0e 94 1c 04 	call	0x838	; 0x838 <__cmpsf2>
 16c:	88 23       	and	r24, r24
 16e:	1c f4       	brge	.+6      	; 0x176 <delay_millisec+0x4a>
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	24 c0       	rjmp	.+72     	; 0x1be <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 176:	c8 01       	movw	r24, r16
 178:	b7 01       	movw	r22, r14
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	3f ef       	ldi	r19, 0xFF	; 255
 17e:	4f e7       	ldi	r20, 0x7F	; 127
 180:	57 e4       	ldi	r21, 0x47	; 71
 182:	0e 94 66 05 	call	0xacc	; 0xacc <__gesf2>
 186:	18 16       	cp	r1, r24
 188:	b4 f4       	brge	.+44     	; 0x1b6 <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 18a:	c6 01       	movw	r24, r12
 18c:	b5 01       	movw	r22, r10
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e2       	ldi	r20, 0x20	; 32
 194:	51 e4       	ldi	r21, 0x41	; 65
 196:	0e 94 6a 05 	call	0xad4	; 0xad4 <__mulsf3>
 19a:	0e 94 88 04 	call	0x910	; 0x910 <__fixunssfsi>
 19e:	80 e9       	ldi	r24, 0x90	; 144
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <delay_millisec+0x82>
 1a4:	fc 01       	movw	r30, r24
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1aa:	61 50       	subi	r22, 0x01	; 1
 1ac:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	61 15       	cp	r22, r1
 1b0:	71 05       	cpc	r23, r1
 1b2:	c1 f7       	brne	.-16     	; 0x1a4 <delay_millisec+0x78>
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1b6:	c8 01       	movw	r24, r16
 1b8:	b7 01       	movw	r22, r14
 1ba:	0e 94 88 04 	call	0x910	; 0x910 <__fixunssfsi>
 1be:	cb 01       	movw	r24, r22
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <delay_millisec+0x94>
}
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	df 90       	pop	r13
 1ce:	cf 90       	pop	r12
 1d0:	bf 90       	pop	r11
 1d2:	af 90       	pop	r10
 1d4:	08 95       	ret

000001d6 <delay_microsec>:

void delay_microsec(int n)
{
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
	_delay_us(n);
 1e6:	aa 27       	eor	r26, r26
 1e8:	97 fd       	sbrc	r25, 7
 1ea:	a0 95       	com	r26
 1ec:	ba 2f       	mov	r27, r26
 1ee:	bc 01       	movw	r22, r24
 1f0:	cd 01       	movw	r24, r26
 1f2:	0e 94 b6 04 	call	0x96c	; 0x96c <__floatsisf>
 1f6:	5b 01       	movw	r10, r22
 1f8:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 1fa:	2b ea       	ldi	r18, 0xAB	; 171
 1fc:	3a ea       	ldi	r19, 0xAA	; 170
 1fe:	4a ea       	ldi	r20, 0xAA	; 170
 200:	50 e4       	ldi	r21, 0x40	; 64
 202:	0e 94 6a 05 	call	0xad4	; 0xad4 <__mulsf3>
 206:	7b 01       	movw	r14, r22
 208:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e8       	ldi	r20, 0x80	; 128
 210:	5f e3       	ldi	r21, 0x3F	; 63
 212:	0e 94 1c 04 	call	0x838	; 0x838 <__cmpsf2>
 216:	88 23       	and	r24, r24
 218:	14 f4       	brge	.+4      	; 0x21e <delay_microsec+0x48>
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	54 c0       	rjmp	.+168    	; 0x2c6 <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
 21e:	c8 01       	movw	r24, r16
 220:	b7 01       	movw	r22, r14
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	4f e7       	ldi	r20, 0x7F	; 127
 228:	53 e4       	ldi	r21, 0x43	; 67
 22a:	0e 94 66 05 	call	0xacc	; 0xacc <__gesf2>
 22e:	18 16       	cp	r1, r24
 230:	0c f0       	brlt	.+2      	; 0x234 <delay_microsec+0x5e>
 232:	45 c0       	rjmp	.+138    	; 0x2be <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
 234:	c6 01       	movw	r24, r12
 236:	b5 01       	movw	r22, r10
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	4a e7       	ldi	r20, 0x7A	; 122
 23e:	54 e4       	ldi	r21, 0x44	; 68
 240:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
 244:	5b 01       	movw	r10, r22
 246:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	4a e7       	ldi	r20, 0x7A	; 122
 24e:	55 e4       	ldi	r21, 0x45	; 69
 250:	0e 94 6a 05 	call	0xad4	; 0xad4 <__mulsf3>
 254:	7b 01       	movw	r14, r22
 256:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e8       	ldi	r20, 0x80	; 128
 25e:	5f e3       	ldi	r21, 0x3F	; 63
 260:	0e 94 1c 04 	call	0x838	; 0x838 <__cmpsf2>
 264:	88 23       	and	r24, r24
 266:	1c f4       	brge	.+6      	; 0x26e <delay_microsec+0x98>
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	24 c0       	rjmp	.+72     	; 0x2b6 <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
 26e:	c8 01       	movw	r24, r16
 270:	b7 01       	movw	r22, r14
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	3f ef       	ldi	r19, 0xFF	; 255
 276:	4f e7       	ldi	r20, 0x7F	; 127
 278:	57 e4       	ldi	r21, 0x47	; 71
 27a:	0e 94 66 05 	call	0xacc	; 0xacc <__gesf2>
 27e:	18 16       	cp	r1, r24
 280:	b4 f4       	brge	.+44     	; 0x2ae <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 282:	c6 01       	movw	r24, r12
 284:	b5 01       	movw	r22, r10
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e2       	ldi	r20, 0x20	; 32
 28c:	51 e4       	ldi	r21, 0x41	; 65
 28e:	0e 94 6a 05 	call	0xad4	; 0xad4 <__mulsf3>
 292:	0e 94 88 04 	call	0x910	; 0x910 <__fixunssfsi>
 296:	80 e9       	ldi	r24, 0x90	; 144
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <delay_microsec+0xd0>
 29c:	fc 01       	movw	r30, r24
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a2:	61 50       	subi	r22, 0x01	; 1
 2a4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a6:	61 15       	cp	r22, r1
 2a8:	71 05       	cpc	r23, r1
 2aa:	c1 f7       	brne	.-16     	; 0x29c <delay_microsec+0xc6>
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ae:	c8 01       	movw	r24, r16
 2b0:	b7 01       	movw	r22, r14
 2b2:	0e 94 88 04 	call	0x910	; 0x910 <__fixunssfsi>
 2b6:	cb 01       	movw	r24, r22
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <delay_microsec+0xe2>
 2bc:	06 c0       	rjmp	.+12     	; 0x2ca <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2be:	c8 01       	movw	r24, r16
 2c0:	b7 01       	movw	r22, r14
 2c2:	0e 94 88 04 	call	0x910	; 0x910 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2c6:	6a 95       	dec	r22
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <delay_microsec+0xf0>
}
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	08 95       	ret

000002dc <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
sensorbyte=0;
 2e4:	10 92 6a 00 	sts	0x006A, r1
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
 2ec:	01 e0       	ldi	r16, 0x01	; 1
 2ee:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
 2f0:	8c 2f       	mov	r24, r28
 2f2:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
	  if(temp[i]<threshold)
 2f6:	84 36       	cpi	r24, 0x64	; 100
 2f8:	60 f4       	brcc	.+24     	; 0x312 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
 2fa:	98 01       	movw	r18, r16
 2fc:	0c 2e       	mov	r0, r28
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <check_sensors+0x28>
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <check_sensors+0x24>
 308:	80 91 6a 00 	lds	r24, 0x006A
 30c:	82 2b       	or	r24, r18
 30e:	80 93 6a 00 	sts	0x006A, r24
 312:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
 314:	c4 30       	cpi	r28, 0x04	; 4
 316:	d1 05       	cpc	r29, r1
 318:	59 f7       	brne	.-42     	; 0x2f0 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 32a:	80 93 6b 00 	sts	0x006B, r24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 334:	80 93 6c 00 	sts	0x006C, r24
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 33e:	80 93 6d 00 	sts	0x006D, r24
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 348:	80 93 6e 00 	sts	0x006E, r24
	}

		
}
 34c:	08 95       	ret

0000034e <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 354:	80 93 73 00 	sts	0x0073, r24
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 35e:	80 93 74 00 	sts	0x0074, r24
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 368:	80 93 75 00 	sts	0x0075, r24
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
 372:	80 93 76 00 	sts	0x0076, r24
 	}

		
}
 376:	08 95       	ret

00000378 <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	c0 e0       	ldi	r28, 0x00	; 0
 380:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
 382:	1f ef       	ldi	r17, 0xFF	; 255
 384:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
 386:	84 e6       	ldi	r24, 0x64	; 100
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 96 00 	call	0x12c	; 0x12c <delay_millisec>
		LED=0x00;
 38e:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
 390:	84 e6       	ldi	r24, 0x64	; 100
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 96 00 	call	0x12c	; 0x12c <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
 398:	21 96       	adiw	r28, 0x01	; 1
 39a:	c5 30       	cpi	r28, 0x05	; 5
 39c:	d1 05       	cpc	r29, r1
 39e:	91 f7       	brne	.-28     	; 0x384 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	08 95       	ret

000003a8 <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
 3a8:	9b bd       	out	0x2b, r25	; 43
 3aa:	8a bd       	out	0x2a, r24	; 42
}
 3ac:	08 95       	ret

000003ae <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
 3ae:	99 bd       	out	0x29, r25	; 41
 3b0:	88 bd       	out	0x28, r24	; 40
}
 3b2:	08 95       	ret

000003b4 <set_pwm2>:

//SET PWM2
void set_pwm2(int c)
{
OCR2=c;
 3b4:	83 bd       	out	0x23, r24	; 35
}
 3b6:	08 95       	ret

000003b8 <set_pwm0>:

//SET PWM0
void set_pwm0(int d)
{
OCR0=d;
 3b8:	8c bf       	out	0x3c, r24	; 60
}
 3ba:	08 95       	ret

000003bc <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
 3bc:	87 b3       	in	r24, 0x17	; 23
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
 3c2:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
 3c4:	c5 98       	cbi	0x18, 5	; 24
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
 3cc:	22 e0       	ldi	r18, 0x02	; 2
 3ce:	35 e0       	ldi	r19, 0x05	; 5
 3d0:	c7 9a       	sbi	0x18, 7	; 24
 3d2:	82 2f       	mov	r24, r18
 3d4:	8a 95       	dec	r24
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
 3d8:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 3da:	82 95       	swap	r24
 3dc:	80 7f       	andi	r24, 0xF0	; 240
 3de:	92 2f       	mov	r25, r18
 3e0:	9a 95       	dec	r25
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
 3e4:	c7 98       	cbi	0x18, 7	; 24
 3e6:	93 2f       	mov	r25, r19
 3e8:	9a 95       	dec	r25
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
 3ec:	c7 9a       	sbi	0x18, 7	; 24
 3ee:	92 2f       	mov	r25, r18
 3f0:	9a 95       	dec	r25
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
 3f4:	96 b3       	in	r25, 0x16	; 22
 3f6:	92 2f       	mov	r25, r18
 3f8:	9a 95       	dec	r25
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
 3fc:	c7 98       	cbi	0x18, 7	; 24
 3fe:	93 2f       	mov	r25, r19
 400:	9a 95       	dec	r25
 402:	f1 f7       	brne	.-4      	; 0x400 <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 404:	87 fd       	sbrc	r24, 7
 406:	e4 cf       	rjmp	.-56     	; 0x3d0 <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
 408:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 40a:	87 b3       	in	r24, 0x17	; 23
 40c:	8f 60       	ori	r24, 0x0F	; 15
 40e:	87 bb       	out	0x17, r24	; 23

}
 410:	08 95       	ret

00000412 <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
 412:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
 414:	66 23       	and	r22, r22
 416:	11 f4       	brne	.+4      	; 0x41c <lcd_byte+0xa>
	CLEAR_RS();
 418:	c5 98       	cbi	0x18, 5	; 24
 41a:	01 c0       	rjmp	.+2      	; 0x41e <lcd_byte+0xc>
else
	SET_RS();
 41c:	c5 9a       	sbi	0x18, 5	; 24
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	8a 95       	dec	r24
 422:	f1 f7       	brne	.-4      	; 0x420 <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
 424:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
 426:	88 b3       	in	r24, 0x18	; 24
 428:	92 2f       	mov	r25, r18
 42a:	92 95       	swap	r25
 42c:	9f 70       	andi	r25, 0x0F	; 15
 42e:	80 7f       	andi	r24, 0xF0	; 240
 430:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 432:	98 bb       	out	0x18, r25	; 24
 434:	95 e0       	ldi	r25, 0x05	; 5
 436:	89 2f       	mov	r24, r25
 438:	8a 95       	dec	r24
 43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
 43c:	c7 98       	cbi	0x18, 7	; 24
 43e:	89 2f       	mov	r24, r25
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <lcd_byte+0x2e>
_delay_us(1);
SET_E();
 444:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
 446:	88 b3       	in	r24, 0x18	; 24
 448:	2f 70       	andi	r18, 0x0F	; 15
 44a:	80 7f       	andi	r24, 0xF0	; 240
 44c:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
 44e:	88 bb       	out	0x18, r24	; 24
 450:	89 2f       	mov	r24, r25
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
 456:	c7 98       	cbi	0x18, 7	; 24
 458:	9a 95       	dec	r25
 45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
 45c:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd_busy_loop>
}
 460:	08 95       	ret

00000462 <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
 462:	1f 93       	push	r17
 464:	18 2f       	mov	r17, r24
 466:	8c e2       	ldi	r24, 0x2C	; 44
 468:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 46a:	20 e9       	ldi	r18, 0x90	; 144
 46c:	31 e0       	ldi	r19, 0x01	; 1
 46e:	f9 01       	movw	r30, r18
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 474:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 476:	d9 f7       	brne	.-10     	; 0x46e <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 478:	87 b3       	in	r24, 0x17	; 23
 47a:	8f 60       	ori	r24, 0x0F	; 15
 47c:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 47e:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 480:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 482:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
 484:	88 b3       	in	r24, 0x18	; 24
 486:	80 7f       	andi	r24, 0xF0	; 240
 488:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 48a:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
 48c:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
 48e:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	8a 95       	dec	r24
 494:	f1 f7       	brne	.-4      	; 0x492 <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
 496:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
 498:	c1 9a       	sbi	0x18, 1	; 24
 49a:	85 e0       	ldi	r24, 0x05	; 5
 49c:	98 2f       	mov	r25, r24
 49e:	9a 95       	dec	r25
 4a0:	f1 f7       	brne	.-4      	; 0x49e <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
 4a2:	c7 98       	cbi	0x18, 7	; 24
 4a4:	8a 95       	dec	r24
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
 4a8:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
 4ac:	81 2f       	mov	r24, r17
 4ae:	8c 60       	ori	r24, 0x0C	; 12
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
 4b6:	88 e2       	ldi	r24, 0x28	; 40
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
}
 4be:	1f 91       	pop	r17
 4c0:	08 95       	ret

000004c2 <lcd_write_string>:
void lcd_write_string(const char *msg)
{
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ec 01       	movw	r28, r24
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	msg++;
 4d0:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
 4d2:	88 81       	ld	r24, Y
 4d4:	88 23       	and	r24, r24
 4d6:	c9 f7       	brne	.-14     	; 0x4ca <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	df 93       	push	r29
 4e8:	cf 93       	push	r28
 4ea:	00 d0       	rcall	.+0      	; 0x4ec <lcd_write_int+0xe>
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <lcd_write_int+0x10>
 4ee:	0f 92       	push	r0
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	9c 01       	movw	r18, r24
 4f6:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
 4f8:	fe 01       	movw	r30, r28
 4fa:	31 96       	adiw	r30, 0x01	; 1
 4fc:	85 e0       	ldi	r24, 0x05	; 5
 4fe:	df 01       	movw	r26, r30
 500:	1d 92       	st	X+, r1
 502:	8a 95       	dec	r24
 504:	e9 f7       	brne	.-6      	; 0x500 <lcd_write_int+0x22>
 506:	fe 01       	movw	r30, r28
 508:	35 96       	adiw	r30, 0x05	; 5
 50a:	0d c0       	rjmp	.+26     	; 0x526 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 50c:	c9 01       	movw	r24, r18
 50e:	6a e0       	ldi	r22, 0x0A	; 10
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__divmodhi4>
 516:	80 83       	st	Z, r24
	val=val/10;
 518:	c9 01       	movw	r24, r18
 51a:	6a e0       	ldi	r22, 0x0A	; 10
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__divmodhi4>
 522:	9b 01       	movw	r18, r22
 524:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 526:	21 15       	cp	r18, r1
 528:	31 05       	cpc	r19, r1
 52a:	81 f7       	brne	.-32     	; 0x50c <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 52c:	bf ef       	ldi	r27, 0xFF	; 255
 52e:	0f 3f       	cpi	r16, 0xFF	; 255
 530:	1b 07       	cpc	r17, r27
 532:	79 f4       	brne	.+30     	; 0x552 <lcd_write_int+0x74>
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 538:	ae 01       	movw	r20, r28
 53a:	4f 5f       	subi	r20, 0xFF	; 255
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	02 c0       	rjmp	.+4      	; 0x544 <lcd_write_int+0x66>
 540:	2f 5f       	subi	r18, 0xFF	; 255
 542:	3f 4f       	sbci	r19, 0xFF	; 255
 544:	fa 01       	movw	r30, r20
 546:	e2 0f       	add	r30, r18
 548:	f3 1f       	adc	r31, r19
 54a:	80 81       	ld	r24, Z
 54c:	88 23       	and	r24, r24
 54e:	c1 f3       	breq	.-16     	; 0x540 <lcd_write_int+0x62>
 550:	04 c0       	rjmp	.+8      	; 0x55a <lcd_write_int+0x7c>
	else
		j=5-field_length;
 552:	25 e0       	ldi	r18, 0x05	; 5
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	20 1b       	sub	r18, r16
 558:	31 0b       	sbc	r19, r17
 55a:	7e 01       	movw	r14, r28
 55c:	08 94       	sec
 55e:	e1 1c       	adc	r14, r1
 560:	f1 1c       	adc	r15, r1
 562:	e2 0e       	add	r14, r18
 564:	f3 1e       	adc	r15, r19
 566:	89 01       	movw	r16, r18
 568:	09 c0       	rjmp	.+18     	; 0x57c <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
 56a:	f7 01       	movw	r30, r14
 56c:	81 91       	ld	r24, Z+
 56e:	7f 01       	movw	r14, r30
 570:	80 5d       	subi	r24, 0xD0	; 208
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
 578:	0f 5f       	subi	r16, 0xFF	; 255
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	05 30       	cpi	r16, 0x05	; 5
 57e:	11 05       	cpc	r17, r1
 580:	a4 f3       	brlt	.-24     	; 0x56a <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	cf 91       	pop	r28
 58e:	df 91       	pop	r29
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	ff 90       	pop	r15
 596:	ef 90       	pop	r14
 598:	08 95       	ret

0000059a <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
 59a:	88 32       	cpi	r24, 0x28	; 40
 59c:	30 f4       	brcc	.+12     	; 0x5aa <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
 59e:	61 11       	cpse	r22, r1
 5a0:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
 5aa:	08 95       	ret

000005ac <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
 5b2:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_goto_xy>
 lcd_write_string(msg);
 5b6:	c8 01       	movw	r24, r16
 5b8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_write_string>
}
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	8a 01       	movw	r16, r20
 5cc:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
 5ce:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_goto_xy>
 lcd_write_int(val,fl);
 5d2:	c8 01       	movw	r24, r16
 5d4:	b7 01       	movw	r22, r14
 5d6:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_write_int>
}
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	ff 90       	pop	r15
 5e0:	ef 90       	pop	r14
 5e2:	08 95       	ret

000005e4 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
 5e4:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
 5e6:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
 5e8:	87 e0       	ldi	r24, 0x07	; 7
 5ea:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
 5ec:	87 e6       	ldi	r24, 0x67	; 103
 5ee:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
 5f0:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
 5f2:	88 e9       	ldi	r24, 0x98	; 152
 5f4:	8a b9       	out	0x0a, r24	; 10
}
 5f6:	08 95       	ret

000005f8 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5f8:	5d 9b       	sbis	0x0b, 5	; 11
 5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
 5fc:	8c b9       	out	0x0c, r24	; 12
}
 5fe:	08 95       	ret

00000600 <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
 600:	fc 01       	movw	r30, r24
 602:	04 c0       	rjmp	.+8      	; 0x60c <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 604:	5d 9b       	sbis	0x0b, 5	; 11
 606:	fe cf       	rjmp	.-4      	; 0x604 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
 608:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
 60a:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 60c:	80 81       	ld	r24, Z
 60e:	88 23       	and	r24, r24
 610:	c9 f7       	brne	.-14     	; 0x604 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
 612:	08 95       	ret

00000614 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 614:	5d 9b       	sbis	0x0b, 5	; 11
 616:	fe cf       	rjmp	.-4      	; 0x614 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
 618:	8a e0       	ldi	r24, 0x0A	; 10
 61a:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 61c:	5d 9b       	sbis	0x0b, 5	; 11
 61e:	fe cf       	rjmp	.-4      	; 0x61c <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
 620:	8d e0       	ldi	r24, 0x0D	; 13
 622:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
 624:	08 95       	ret

00000626 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
 626:	5f 9b       	sbis	0x0b, 7	; 11
 628:	fe cf       	rjmp	.-4      	; 0x626 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
 62a:	8c b1       	in	r24, 0x0c	; 12
}
 62c:	08 95       	ret

0000062e <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	84 bb       	out	0x14, r24	; 20
}
 632:	08 95       	ret

00000634 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
 634:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 638:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 63a:	af 98       	cbi	0x15, 7	; 21
}
 63c:	08 95       	ret

0000063e <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
 63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 640:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 642:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 644:	af 98       	cbi	0x15, 7	; 21
}
 646:	08 95       	ret

00000648 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
 648:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 64c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 64e:	af 98       	cbi	0x15, 7	; 21
}
 650:	08 95       	ret

00000652 <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
 652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 656:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 658:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
 65a:	08 95       	ret

0000065c <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
 65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 660:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 662:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
 664:	08 95       	ret

00000666 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
 666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 668:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
 66c:	af 9a       	sbi	0x15, 7	; 21
}
 66e:	08 95       	ret

00000670 <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
 670:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 672:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 676:	af 98       	cbi	0x15, 7	; 21
}
 678:	08 95       	ret

0000067a <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
 67a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 67c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 680:	af 9a       	sbi	0x15, 7	; 21
}
 682:	08 95       	ret

00000684 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
 684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 686:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 688:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 68a:	af 98       	cbi	0x15, 7	; 21
}
 68c:	08 95       	ret

0000068e <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
 68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 690:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 692:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 694:	af 9a       	sbi	0x15, 7	; 21
}
 696:	08 95       	ret

00000698 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
 698:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 69a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 69c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 69e:	af 98       	cbi	0x15, 7	; 21
}
 6a0:	08 95       	ret

000006a2 <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
 6a2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
 6a4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 6a6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
 6a8:	af 9a       	sbi	0x15, 7	; 21
}
 6aa:	08 95       	ret

000006ac <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
 6ac:	82 b3       	in	r24, 0x12	; 18
 6ae:	8f 60       	ori	r24, 0x0F	; 15
 6b0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
 6b2:	81 b3       	in	r24, 0x11	; 17
 6b4:	80 7f       	andi	r24, 0xF0	; 240
 6b6:	81 bb       	out	0x11, r24	; 17
}
 6b8:	08 95       	ret

000006ba <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
 6ba:	20 b3       	in	r18, 0x10	; 16
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	20 95       	com	r18
 6c0:	30 95       	com	r19
 6c2:	21 70       	andi	r18, 0x01	; 1
 6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6c6:	c9 01       	movw	r24, r18
 6c8:	08 95       	ret

000006ca <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
 6ca:	20 b3       	in	r18, 0x10	; 16
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	36 95       	lsr	r19
 6d0:	27 95       	ror	r18
 6d2:	20 95       	com	r18
 6d4:	30 95       	com	r19
 6d6:	21 70       	andi	r18, 0x01	; 1
 6d8:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6da:	c9 01       	movw	r24, r18
 6dc:	08 95       	ret

000006de <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
 6de:	20 b3       	in	r18, 0x10	; 16
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	36 95       	lsr	r19
 6e4:	27 95       	ror	r18
 6e6:	36 95       	lsr	r19
 6e8:	27 95       	ror	r18
 6ea:	20 95       	com	r18
 6ec:	30 95       	com	r19
 6ee:	21 70       	andi	r18, 0x01	; 1
 6f0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6f2:	c9 01       	movw	r24, r18
 6f4:	08 95       	ret

000006f6 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
 6f6:	20 b3       	in	r18, 0x10	; 16
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	43 e0       	ldi	r20, 0x03	; 3
 6fc:	36 95       	lsr	r19
 6fe:	27 95       	ror	r18
 700:	4a 95       	dec	r20
 702:	e1 f7       	brne	.-8      	; 0x6fc <pressed_switch3+0x6>
 704:	20 95       	com	r18
 706:	30 95       	com	r19
 708:	21 70       	andi	r18, 0x01	; 1
 70a:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 70c:	c9 01       	movw	r24, r18
 70e:	08 95       	ret

00000710 <main>:
#include"sra.c"

void main()
{
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
pwm1_init();
 714:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
lcd_init(underline);
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	0e 94 31 02 	call	0x462	; 0x462 <lcd_init>
lcd_clear();
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>

DDRC=0xFF;
 726:	9f ef       	ldi	r25, 0xFF	; 255
 728:	94 bb       	out	0x14, r25	; 20
PORTC=0x00;
 72a:	15 ba       	out	0x15, r1	; 21
DDRB=0xFF;
 72c:	97 bb       	out	0x17, r25	; 23
DDRD=0xF0;
 72e:	80 ef       	ldi	r24, 0xF0	; 240
 730:	81 bb       	out	0x11, r24	; 17
PORTD=0xFF;
 732:	92 bb       	out	0x12, r25	; 18
//DDRD=0b01110000;
//PORTD=0b11111111;
lcd_write_string_xy(5,0,"PRESS D0");
 734:	85 e0       	ldi	r24, 0x05	; 5
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	40 e6       	ldi	r20, 0x60	; 96
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>

while(1)
{
if(bit_is_clear(PIND,0))
 744:	80 99       	sbic	0x10, 0	; 16
 746:	fe cf       	rjmp	.-4      	; 0x744 <main+0x34>
{
lcd_clear();
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
 750:	c0 e0       	ldi	r28, 0x00	; 0
 752:	d0 e0       	ldi	r29, 0x00	; 0
for(int i=0;i<300;i=i+5)
{
sbi(PORTC,4);
 754:	ac 9a       	sbi	0x15, 4	; 21
sbi(PORTC,6);
 756:	ae 9a       	sbi	0x15, 6	; 21
cbi(PORTC,5);
 758:	ad 98       	cbi	0x15, 5	; 21
cbi(PORTC,7);
 75a:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
 75c:	db bd       	out	0x2b, r29	; 43
 75e:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
 760:	d9 bd       	out	0x29, r29	; 41
 762:	c8 bd       	out	0x28, r28	; 40

set_pwm1a(i);
set_pwm1b(i);
lcd_write_int_xy(5,0,i,3);
 764:	85 e0       	ldi	r24, 0x05	; 5
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	ae 01       	movw	r20, r28
 76e:	23 e0       	ldi	r18, 0x03	; 3
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
delay_sec(3);
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 7d 00 	call	0xfa	; 0xfa <delay_sec>
while(1)
{
if(bit_is_clear(PIND,0))
{
lcd_clear();
for(int i=0;i<300;i=i+5)
 77e:	25 96       	adiw	r28, 0x05	; 5
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	cc 32       	cpi	r28, 0x2C	; 44
 784:	d8 07       	cpc	r29, r24
 786:	31 f7       	brne	.-52     	; 0x754 <main+0x44>
 788:	dd cf       	rjmp	.-70     	; 0x744 <main+0x34>

0000078a <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__eerd_byte_m16>
 792:	80 93 6f 00 	sts	0x006F, r24
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__eerd_byte_m16>
 79e:	80 93 70 00 	sts	0x0070, r24
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__eerd_byte_m16>
 7aa:	80 93 71 00 	sts	0x0071, r24
 7ae:	83 e0       	ldi	r24, 0x03	; 3
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__eerd_byte_m16>
 7b6:	80 93 72 00 	sts	0x0072, r24
		eeprom_addr++;
	}
}
 7ba:	08 95       	ret

000007bc <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
 7c0:	20 91 73 00 	lds	r18, 0x0073
 7c4:	80 91 6b 00 	lds	r24, 0x006B
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	82 0f       	add	r24, r18
 7cc:	91 1d       	adc	r25, r1
 7ce:	95 95       	asr	r25
 7d0:	87 95       	ror	r24
 7d2:	80 93 6f 00 	sts	0x006F, r24
 7d6:	20 91 74 00 	lds	r18, 0x0074
 7da:	80 91 6c 00 	lds	r24, 0x006C
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	82 0f       	add	r24, r18
 7e2:	91 1d       	adc	r25, r1
 7e4:	95 95       	asr	r25
 7e6:	87 95       	ror	r24
 7e8:	80 93 70 00 	sts	0x0070, r24
 7ec:	20 91 75 00 	lds	r18, 0x0075
 7f0:	80 91 6d 00 	lds	r24, 0x006D
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	82 0f       	add	r24, r18
 7f8:	91 1d       	adc	r25, r1
 7fa:	95 95       	asr	r25
 7fc:	87 95       	ror	r24
 7fe:	80 93 71 00 	sts	0x0071, r24
 802:	20 91 76 00 	lds	r18, 0x0076
 806:	80 91 6e 00 	lds	r24, 0x006E
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	82 0f       	add	r24, r18
 80e:	91 1d       	adc	r25, r1
 810:	95 95       	asr	r25
 812:	87 95       	ror	r24
 814:	80 93 72 00 	sts	0x0072, r24
 818:	c0 e0       	ldi	r28, 0x00	; 0
 81a:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
 81c:	fe 01       	movw	r30, r28
 81e:	e1 59       	subi	r30, 0x91	; 145
 820:	ff 4f       	sbci	r31, 0xFF	; 255
 822:	ce 01       	movw	r24, r28
 824:	60 81       	ld	r22, Z
 826:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__eewr_byte_m16>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
 82a:	21 96       	adiw	r28, 0x01	; 1
 82c:	c4 30       	cpi	r28, 0x04	; 4
 82e:	d1 05       	cpc	r29, r1
 830:	a9 f7       	brne	.-22     	; 0x81c <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <__cmpsf2>:
 838:	d4 d0       	rcall	.+424    	; 0x9e2 <__fp_cmp>
 83a:	08 f4       	brcc	.+2      	; 0x83e <__cmpsf2+0x6>
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	08 95       	ret

00000840 <__divsf3>:
 840:	0c d0       	rcall	.+24     	; 0x85a <__divsf3x>
 842:	0a c1       	rjmp	.+532    	; 0xa58 <__fp_round>
 844:	02 d1       	rcall	.+516    	; 0xa4a <__fp_pscB>
 846:	40 f0       	brcs	.+16     	; 0x858 <__divsf3+0x18>
 848:	f9 d0       	rcall	.+498    	; 0xa3c <__fp_pscA>
 84a:	30 f0       	brcs	.+12     	; 0x858 <__divsf3+0x18>
 84c:	21 f4       	brne	.+8      	; 0x856 <__divsf3+0x16>
 84e:	5f 3f       	cpi	r21, 0xFF	; 255
 850:	19 f0       	breq	.+6      	; 0x858 <__divsf3+0x18>
 852:	eb c0       	rjmp	.+470    	; 0xa2a <__fp_inf>
 854:	51 11       	cpse	r21, r1
 856:	34 c1       	rjmp	.+616    	; 0xac0 <__fp_szero>
 858:	ee c0       	rjmp	.+476    	; 0xa36 <__fp_nan>

0000085a <__divsf3x>:
 85a:	0f d1       	rcall	.+542    	; 0xa7a <__fp_split3>
 85c:	98 f3       	brcs	.-26     	; 0x844 <__divsf3+0x4>

0000085e <__divsf3_pse>:
 85e:	99 23       	and	r25, r25
 860:	c9 f3       	breq	.-14     	; 0x854 <__divsf3+0x14>
 862:	55 23       	and	r21, r21
 864:	b1 f3       	breq	.-20     	; 0x852 <__divsf3+0x12>
 866:	95 1b       	sub	r25, r21
 868:	55 0b       	sbc	r21, r21
 86a:	bb 27       	eor	r27, r27
 86c:	aa 27       	eor	r26, r26
 86e:	62 17       	cp	r22, r18
 870:	73 07       	cpc	r23, r19
 872:	84 07       	cpc	r24, r20
 874:	38 f0       	brcs	.+14     	; 0x884 <__divsf3_pse+0x26>
 876:	9f 5f       	subi	r25, 0xFF	; 255
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	22 0f       	add	r18, r18
 87c:	33 1f       	adc	r19, r19
 87e:	44 1f       	adc	r20, r20
 880:	aa 1f       	adc	r26, r26
 882:	a9 f3       	breq	.-22     	; 0x86e <__divsf3_pse+0x10>
 884:	33 d0       	rcall	.+102    	; 0x8ec <__divsf3_pse+0x8e>
 886:	0e 2e       	mov	r0, r30
 888:	3a f0       	brmi	.+14     	; 0x898 <__divsf3_pse+0x3a>
 88a:	e0 e8       	ldi	r30, 0x80	; 128
 88c:	30 d0       	rcall	.+96     	; 0x8ee <__divsf3_pse+0x90>
 88e:	91 50       	subi	r25, 0x01	; 1
 890:	50 40       	sbci	r21, 0x00	; 0
 892:	e6 95       	lsr	r30
 894:	00 1c       	adc	r0, r0
 896:	ca f7       	brpl	.-14     	; 0x88a <__divsf3_pse+0x2c>
 898:	29 d0       	rcall	.+82     	; 0x8ec <__divsf3_pse+0x8e>
 89a:	fe 2f       	mov	r31, r30
 89c:	27 d0       	rcall	.+78     	; 0x8ec <__divsf3_pse+0x8e>
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	bb 1f       	adc	r27, r27
 8a6:	26 17       	cp	r18, r22
 8a8:	37 07       	cpc	r19, r23
 8aa:	48 07       	cpc	r20, r24
 8ac:	ab 07       	cpc	r26, r27
 8ae:	b0 e8       	ldi	r27, 0x80	; 128
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <__divsf3_pse+0x56>
 8b2:	bb 0b       	sbc	r27, r27
 8b4:	80 2d       	mov	r24, r0
 8b6:	bf 01       	movw	r22, r30
 8b8:	ff 27       	eor	r31, r31
 8ba:	93 58       	subi	r25, 0x83	; 131
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	2a f0       	brmi	.+10     	; 0x8ca <__divsf3_pse+0x6c>
 8c0:	9e 3f       	cpi	r25, 0xFE	; 254
 8c2:	51 05       	cpc	r21, r1
 8c4:	68 f0       	brcs	.+26     	; 0x8e0 <__divsf3_pse+0x82>
 8c6:	b1 c0       	rjmp	.+354    	; 0xa2a <__fp_inf>
 8c8:	fb c0       	rjmp	.+502    	; 0xac0 <__fp_szero>
 8ca:	5f 3f       	cpi	r21, 0xFF	; 255
 8cc:	ec f3       	brlt	.-6      	; 0x8c8 <__divsf3_pse+0x6a>
 8ce:	98 3e       	cpi	r25, 0xE8	; 232
 8d0:	dc f3       	brlt	.-10     	; 0x8c8 <__divsf3_pse+0x6a>
 8d2:	86 95       	lsr	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b7 95       	ror	r27
 8da:	f7 95       	ror	r31
 8dc:	9f 5f       	subi	r25, 0xFF	; 255
 8de:	c9 f7       	brne	.-14     	; 0x8d2 <__divsf3_pse+0x74>
 8e0:	88 0f       	add	r24, r24
 8e2:	91 1d       	adc	r25, r1
 8e4:	96 95       	lsr	r25
 8e6:	87 95       	ror	r24
 8e8:	97 f9       	bld	r25, 7
 8ea:	08 95       	ret
 8ec:	e1 e0       	ldi	r30, 0x01	; 1
 8ee:	66 0f       	add	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	bb 1f       	adc	r27, r27
 8f6:	62 17       	cp	r22, r18
 8f8:	73 07       	cpc	r23, r19
 8fa:	84 07       	cpc	r24, r20
 8fc:	ba 07       	cpc	r27, r26
 8fe:	20 f0       	brcs	.+8      	; 0x908 <__divsf3_pse+0xaa>
 900:	62 1b       	sub	r22, r18
 902:	73 0b       	sbc	r23, r19
 904:	84 0b       	sbc	r24, r20
 906:	ba 0b       	sbc	r27, r26
 908:	ee 1f       	adc	r30, r30
 90a:	88 f7       	brcc	.-30     	; 0x8ee <__divsf3_pse+0x90>
 90c:	e0 95       	com	r30
 90e:	08 95       	ret

00000910 <__fixunssfsi>:
 910:	bc d0       	rcall	.+376    	; 0xa8a <__fp_splitA>
 912:	88 f0       	brcs	.+34     	; 0x936 <__fixunssfsi+0x26>
 914:	9f 57       	subi	r25, 0x7F	; 127
 916:	90 f0       	brcs	.+36     	; 0x93c <__fixunssfsi+0x2c>
 918:	b9 2f       	mov	r27, r25
 91a:	99 27       	eor	r25, r25
 91c:	b7 51       	subi	r27, 0x17	; 23
 91e:	a0 f0       	brcs	.+40     	; 0x948 <__fixunssfsi+0x38>
 920:	d1 f0       	breq	.+52     	; 0x956 <__fixunssfsi+0x46>
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	1a f0       	brmi	.+6      	; 0x932 <__fixunssfsi+0x22>
 92c:	ba 95       	dec	r27
 92e:	c9 f7       	brne	.-14     	; 0x922 <__fixunssfsi+0x12>
 930:	12 c0       	rjmp	.+36     	; 0x956 <__fixunssfsi+0x46>
 932:	b1 30       	cpi	r27, 0x01	; 1
 934:	81 f0       	breq	.+32     	; 0x956 <__fixunssfsi+0x46>
 936:	c3 d0       	rcall	.+390    	; 0xabe <__fp_zero>
 938:	b1 e0       	ldi	r27, 0x01	; 1
 93a:	08 95       	ret
 93c:	c0 c0       	rjmp	.+384    	; 0xabe <__fp_zero>
 93e:	67 2f       	mov	r22, r23
 940:	78 2f       	mov	r23, r24
 942:	88 27       	eor	r24, r24
 944:	b8 5f       	subi	r27, 0xF8	; 248
 946:	39 f0       	breq	.+14     	; 0x956 <__fixunssfsi+0x46>
 948:	b9 3f       	cpi	r27, 0xF9	; 249
 94a:	cc f3       	brlt	.-14     	; 0x93e <__fixunssfsi+0x2e>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b3 95       	inc	r27
 954:	d9 f7       	brne	.-10     	; 0x94c <__fixunssfsi+0x3c>
 956:	3e f4       	brtc	.+14     	; 0x966 <__fixunssfsi+0x56>
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__floatunsisf>:
 968:	e8 94       	clt
 96a:	09 c0       	rjmp	.+18     	; 0x97e <__floatsisf+0x12>

0000096c <__floatsisf>:
 96c:	97 fb       	bst	r25, 7
 96e:	3e f4       	brtc	.+14     	; 0x97e <__floatsisf+0x12>
 970:	90 95       	com	r25
 972:	80 95       	com	r24
 974:	70 95       	com	r23
 976:	61 95       	neg	r22
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	99 23       	and	r25, r25
 980:	a9 f0       	breq	.+42     	; 0x9ac <__floatsisf+0x40>
 982:	f9 2f       	mov	r31, r25
 984:	96 e9       	ldi	r25, 0x96	; 150
 986:	bb 27       	eor	r27, r27
 988:	93 95       	inc	r25
 98a:	f6 95       	lsr	r31
 98c:	87 95       	ror	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b7 95       	ror	r27
 994:	f1 11       	cpse	r31, r1
 996:	f8 cf       	rjmp	.-16     	; 0x988 <__floatsisf+0x1c>
 998:	fa f4       	brpl	.+62     	; 0x9d8 <__floatsisf+0x6c>
 99a:	bb 0f       	add	r27, r27
 99c:	11 f4       	brne	.+4      	; 0x9a2 <__floatsisf+0x36>
 99e:	60 ff       	sbrs	r22, 0
 9a0:	1b c0       	rjmp	.+54     	; 0x9d8 <__floatsisf+0x6c>
 9a2:	6f 5f       	subi	r22, 0xFF	; 255
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <__floatsisf+0x6c>
 9ac:	88 23       	and	r24, r24
 9ae:	11 f0       	breq	.+4      	; 0x9b4 <__floatsisf+0x48>
 9b0:	96 e9       	ldi	r25, 0x96	; 150
 9b2:	11 c0       	rjmp	.+34     	; 0x9d6 <__floatsisf+0x6a>
 9b4:	77 23       	and	r23, r23
 9b6:	21 f0       	breq	.+8      	; 0x9c0 <__floatsisf+0x54>
 9b8:	9e e8       	ldi	r25, 0x8E	; 142
 9ba:	87 2f       	mov	r24, r23
 9bc:	76 2f       	mov	r23, r22
 9be:	05 c0       	rjmp	.+10     	; 0x9ca <__floatsisf+0x5e>
 9c0:	66 23       	and	r22, r22
 9c2:	71 f0       	breq	.+28     	; 0x9e0 <__floatsisf+0x74>
 9c4:	96 e8       	ldi	r25, 0x86	; 134
 9c6:	86 2f       	mov	r24, r22
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	2a f0       	brmi	.+10     	; 0x9d8 <__floatsisf+0x6c>
 9ce:	9a 95       	dec	r25
 9d0:	66 0f       	add	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	da f7       	brpl	.-10     	; 0x9ce <__floatsisf+0x62>
 9d8:	88 0f       	add	r24, r24
 9da:	96 95       	lsr	r25
 9dc:	87 95       	ror	r24
 9de:	97 f9       	bld	r25, 7
 9e0:	08 95       	ret

000009e2 <__fp_cmp>:
 9e2:	99 0f       	add	r25, r25
 9e4:	00 08       	sbc	r0, r0
 9e6:	55 0f       	add	r21, r21
 9e8:	aa 0b       	sbc	r26, r26
 9ea:	e0 e8       	ldi	r30, 0x80	; 128
 9ec:	fe ef       	ldi	r31, 0xFE	; 254
 9ee:	16 16       	cp	r1, r22
 9f0:	17 06       	cpc	r1, r23
 9f2:	e8 07       	cpc	r30, r24
 9f4:	f9 07       	cpc	r31, r25
 9f6:	c0 f0       	brcs	.+48     	; 0xa28 <__fp_cmp+0x46>
 9f8:	12 16       	cp	r1, r18
 9fa:	13 06       	cpc	r1, r19
 9fc:	e4 07       	cpc	r30, r20
 9fe:	f5 07       	cpc	r31, r21
 a00:	98 f0       	brcs	.+38     	; 0xa28 <__fp_cmp+0x46>
 a02:	62 1b       	sub	r22, r18
 a04:	73 0b       	sbc	r23, r19
 a06:	84 0b       	sbc	r24, r20
 a08:	95 0b       	sbc	r25, r21
 a0a:	39 f4       	brne	.+14     	; 0xa1a <__fp_cmp+0x38>
 a0c:	0a 26       	eor	r0, r26
 a0e:	61 f0       	breq	.+24     	; 0xa28 <__fp_cmp+0x46>
 a10:	23 2b       	or	r18, r19
 a12:	24 2b       	or	r18, r20
 a14:	25 2b       	or	r18, r21
 a16:	21 f4       	brne	.+8      	; 0xa20 <__fp_cmp+0x3e>
 a18:	08 95       	ret
 a1a:	0a 26       	eor	r0, r26
 a1c:	09 f4       	brne	.+2      	; 0xa20 <__fp_cmp+0x3e>
 a1e:	a1 40       	sbci	r26, 0x01	; 1
 a20:	a6 95       	lsr	r26
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	81 1d       	adc	r24, r1
 a26:	81 1d       	adc	r24, r1
 a28:	08 95       	ret

00000a2a <__fp_inf>:
 a2a:	97 f9       	bld	r25, 7
 a2c:	9f 67       	ori	r25, 0x7F	; 127
 a2e:	80 e8       	ldi	r24, 0x80	; 128
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	08 95       	ret

00000a36 <__fp_nan>:
 a36:	9f ef       	ldi	r25, 0xFF	; 255
 a38:	80 ec       	ldi	r24, 0xC0	; 192
 a3a:	08 95       	ret

00000a3c <__fp_pscA>:
 a3c:	00 24       	eor	r0, r0
 a3e:	0a 94       	dec	r0
 a40:	16 16       	cp	r1, r22
 a42:	17 06       	cpc	r1, r23
 a44:	18 06       	cpc	r1, r24
 a46:	09 06       	cpc	r0, r25
 a48:	08 95       	ret

00000a4a <__fp_pscB>:
 a4a:	00 24       	eor	r0, r0
 a4c:	0a 94       	dec	r0
 a4e:	12 16       	cp	r1, r18
 a50:	13 06       	cpc	r1, r19
 a52:	14 06       	cpc	r1, r20
 a54:	05 06       	cpc	r0, r21
 a56:	08 95       	ret

00000a58 <__fp_round>:
 a58:	09 2e       	mov	r0, r25
 a5a:	03 94       	inc	r0
 a5c:	00 0c       	add	r0, r0
 a5e:	11 f4       	brne	.+4      	; 0xa64 <__fp_round+0xc>
 a60:	88 23       	and	r24, r24
 a62:	52 f0       	brmi	.+20     	; 0xa78 <__fp_round+0x20>
 a64:	bb 0f       	add	r27, r27
 a66:	40 f4       	brcc	.+16     	; 0xa78 <__fp_round+0x20>
 a68:	bf 2b       	or	r27, r31
 a6a:	11 f4       	brne	.+4      	; 0xa70 <__fp_round+0x18>
 a6c:	60 ff       	sbrs	r22, 0
 a6e:	04 c0       	rjmp	.+8      	; 0xa78 <__fp_round+0x20>
 a70:	6f 5f       	subi	r22, 0xFF	; 255
 a72:	7f 4f       	sbci	r23, 0xFF	; 255
 a74:	8f 4f       	sbci	r24, 0xFF	; 255
 a76:	9f 4f       	sbci	r25, 0xFF	; 255
 a78:	08 95       	ret

00000a7a <__fp_split3>:
 a7a:	57 fd       	sbrc	r21, 7
 a7c:	90 58       	subi	r25, 0x80	; 128
 a7e:	44 0f       	add	r20, r20
 a80:	55 1f       	adc	r21, r21
 a82:	59 f0       	breq	.+22     	; 0xa9a <__fp_splitA+0x10>
 a84:	5f 3f       	cpi	r21, 0xFF	; 255
 a86:	71 f0       	breq	.+28     	; 0xaa4 <__fp_splitA+0x1a>
 a88:	47 95       	ror	r20

00000a8a <__fp_splitA>:
 a8a:	88 0f       	add	r24, r24
 a8c:	97 fb       	bst	r25, 7
 a8e:	99 1f       	adc	r25, r25
 a90:	61 f0       	breq	.+24     	; 0xaaa <__fp_splitA+0x20>
 a92:	9f 3f       	cpi	r25, 0xFF	; 255
 a94:	79 f0       	breq	.+30     	; 0xab4 <__fp_splitA+0x2a>
 a96:	87 95       	ror	r24
 a98:	08 95       	ret
 a9a:	12 16       	cp	r1, r18
 a9c:	13 06       	cpc	r1, r19
 a9e:	14 06       	cpc	r1, r20
 aa0:	55 1f       	adc	r21, r21
 aa2:	f2 cf       	rjmp	.-28     	; 0xa88 <__fp_split3+0xe>
 aa4:	46 95       	lsr	r20
 aa6:	f1 df       	rcall	.-30     	; 0xa8a <__fp_splitA>
 aa8:	08 c0       	rjmp	.+16     	; 0xaba <__fp_splitA+0x30>
 aaa:	16 16       	cp	r1, r22
 aac:	17 06       	cpc	r1, r23
 aae:	18 06       	cpc	r1, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	f1 cf       	rjmp	.-30     	; 0xa96 <__fp_splitA+0xc>
 ab4:	86 95       	lsr	r24
 ab6:	71 05       	cpc	r23, r1
 ab8:	61 05       	cpc	r22, r1
 aba:	08 94       	sec
 abc:	08 95       	ret

00000abe <__fp_zero>:
 abe:	e8 94       	clt

00000ac0 <__fp_szero>:
 ac0:	bb 27       	eor	r27, r27
 ac2:	66 27       	eor	r22, r22
 ac4:	77 27       	eor	r23, r23
 ac6:	cb 01       	movw	r24, r22
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret

00000acc <__gesf2>:
 acc:	8a df       	rcall	.-236    	; 0x9e2 <__fp_cmp>
 ace:	08 f4       	brcc	.+2      	; 0xad2 <__gesf2+0x6>
 ad0:	8f ef       	ldi	r24, 0xFF	; 255
 ad2:	08 95       	ret

00000ad4 <__mulsf3>:
 ad4:	0b d0       	rcall	.+22     	; 0xaec <__mulsf3x>
 ad6:	c0 cf       	rjmp	.-128    	; 0xa58 <__fp_round>
 ad8:	b1 df       	rcall	.-158    	; 0xa3c <__fp_pscA>
 ada:	28 f0       	brcs	.+10     	; 0xae6 <__mulsf3+0x12>
 adc:	b6 df       	rcall	.-148    	; 0xa4a <__fp_pscB>
 ade:	18 f0       	brcs	.+6      	; 0xae6 <__mulsf3+0x12>
 ae0:	95 23       	and	r25, r21
 ae2:	09 f0       	breq	.+2      	; 0xae6 <__mulsf3+0x12>
 ae4:	a2 cf       	rjmp	.-188    	; 0xa2a <__fp_inf>
 ae6:	a7 cf       	rjmp	.-178    	; 0xa36 <__fp_nan>
 ae8:	11 24       	eor	r1, r1
 aea:	ea cf       	rjmp	.-44     	; 0xac0 <__fp_szero>

00000aec <__mulsf3x>:
 aec:	c6 df       	rcall	.-116    	; 0xa7a <__fp_split3>
 aee:	a0 f3       	brcs	.-24     	; 0xad8 <__mulsf3+0x4>

00000af0 <__mulsf3_pse>:
 af0:	95 9f       	mul	r25, r21
 af2:	d1 f3       	breq	.-12     	; 0xae8 <__mulsf3+0x14>
 af4:	95 0f       	add	r25, r21
 af6:	50 e0       	ldi	r21, 0x00	; 0
 af8:	55 1f       	adc	r21, r21
 afa:	62 9f       	mul	r22, r18
 afc:	f0 01       	movw	r30, r0
 afe:	72 9f       	mul	r23, r18
 b00:	bb 27       	eor	r27, r27
 b02:	f0 0d       	add	r31, r0
 b04:	b1 1d       	adc	r27, r1
 b06:	63 9f       	mul	r22, r19
 b08:	aa 27       	eor	r26, r26
 b0a:	f0 0d       	add	r31, r0
 b0c:	b1 1d       	adc	r27, r1
 b0e:	aa 1f       	adc	r26, r26
 b10:	64 9f       	mul	r22, r20
 b12:	66 27       	eor	r22, r22
 b14:	b0 0d       	add	r27, r0
 b16:	a1 1d       	adc	r26, r1
 b18:	66 1f       	adc	r22, r22
 b1a:	82 9f       	mul	r24, r18
 b1c:	22 27       	eor	r18, r18
 b1e:	b0 0d       	add	r27, r0
 b20:	a1 1d       	adc	r26, r1
 b22:	62 1f       	adc	r22, r18
 b24:	73 9f       	mul	r23, r19
 b26:	b0 0d       	add	r27, r0
 b28:	a1 1d       	adc	r26, r1
 b2a:	62 1f       	adc	r22, r18
 b2c:	83 9f       	mul	r24, r19
 b2e:	a0 0d       	add	r26, r0
 b30:	61 1d       	adc	r22, r1
 b32:	22 1f       	adc	r18, r18
 b34:	74 9f       	mul	r23, r20
 b36:	33 27       	eor	r19, r19
 b38:	a0 0d       	add	r26, r0
 b3a:	61 1d       	adc	r22, r1
 b3c:	23 1f       	adc	r18, r19
 b3e:	84 9f       	mul	r24, r20
 b40:	60 0d       	add	r22, r0
 b42:	21 1d       	adc	r18, r1
 b44:	82 2f       	mov	r24, r18
 b46:	76 2f       	mov	r23, r22
 b48:	6a 2f       	mov	r22, r26
 b4a:	11 24       	eor	r1, r1
 b4c:	9f 57       	subi	r25, 0x7F	; 127
 b4e:	50 40       	sbci	r21, 0x00	; 0
 b50:	8a f0       	brmi	.+34     	; 0xb74 <__mulsf3_pse+0x84>
 b52:	e1 f0       	breq	.+56     	; 0xb8c <__mulsf3_pse+0x9c>
 b54:	88 23       	and	r24, r24
 b56:	4a f0       	brmi	.+18     	; 0xb6a <__mulsf3_pse+0x7a>
 b58:	ee 0f       	add	r30, r30
 b5a:	ff 1f       	adc	r31, r31
 b5c:	bb 1f       	adc	r27, r27
 b5e:	66 1f       	adc	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	91 50       	subi	r25, 0x01	; 1
 b66:	50 40       	sbci	r21, 0x00	; 0
 b68:	a9 f7       	brne	.-22     	; 0xb54 <__mulsf3_pse+0x64>
 b6a:	9e 3f       	cpi	r25, 0xFE	; 254
 b6c:	51 05       	cpc	r21, r1
 b6e:	70 f0       	brcs	.+28     	; 0xb8c <__mulsf3_pse+0x9c>
 b70:	5c cf       	rjmp	.-328    	; 0xa2a <__fp_inf>
 b72:	a6 cf       	rjmp	.-180    	; 0xac0 <__fp_szero>
 b74:	5f 3f       	cpi	r21, 0xFF	; 255
 b76:	ec f3       	brlt	.-6      	; 0xb72 <__mulsf3_pse+0x82>
 b78:	98 3e       	cpi	r25, 0xE8	; 232
 b7a:	dc f3       	brlt	.-10     	; 0xb72 <__mulsf3_pse+0x82>
 b7c:	86 95       	lsr	r24
 b7e:	77 95       	ror	r23
 b80:	67 95       	ror	r22
 b82:	b7 95       	ror	r27
 b84:	f7 95       	ror	r31
 b86:	e7 95       	ror	r30
 b88:	9f 5f       	subi	r25, 0xFF	; 255
 b8a:	c1 f7       	brne	.-16     	; 0xb7c <__mulsf3_pse+0x8c>
 b8c:	fe 2b       	or	r31, r30
 b8e:	88 0f       	add	r24, r24
 b90:	91 1d       	adc	r25, r1
 b92:	96 95       	lsr	r25
 b94:	87 95       	ror	r24
 b96:	97 f9       	bld	r25, 7
 b98:	08 95       	ret

00000b9a <__divmodhi4>:
 b9a:	97 fb       	bst	r25, 7
 b9c:	09 2e       	mov	r0, r25
 b9e:	07 26       	eor	r0, r23
 ba0:	0a d0       	rcall	.+20     	; 0xbb6 <__divmodhi4_neg1>
 ba2:	77 fd       	sbrc	r23, 7
 ba4:	04 d0       	rcall	.+8      	; 0xbae <__divmodhi4_neg2>
 ba6:	0c d0       	rcall	.+24     	; 0xbc0 <__udivmodhi4>
 ba8:	06 d0       	rcall	.+12     	; 0xbb6 <__divmodhi4_neg1>
 baa:	00 20       	and	r0, r0
 bac:	1a f4       	brpl	.+6      	; 0xbb4 <__divmodhi4_exit>

00000bae <__divmodhi4_neg2>:
 bae:	70 95       	com	r23
 bb0:	61 95       	neg	r22
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb4 <__divmodhi4_exit>:
 bb4:	08 95       	ret

00000bb6 <__divmodhi4_neg1>:
 bb6:	f6 f7       	brtc	.-4      	; 0xbb4 <__divmodhi4_exit>
 bb8:	90 95       	com	r25
 bba:	81 95       	neg	r24
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	08 95       	ret

00000bc0 <__udivmodhi4>:
 bc0:	aa 1b       	sub	r26, r26
 bc2:	bb 1b       	sub	r27, r27
 bc4:	51 e1       	ldi	r21, 0x11	; 17
 bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <__udivmodhi4_ep>

00000bc8 <__udivmodhi4_loop>:
 bc8:	aa 1f       	adc	r26, r26
 bca:	bb 1f       	adc	r27, r27
 bcc:	a6 17       	cp	r26, r22
 bce:	b7 07       	cpc	r27, r23
 bd0:	10 f0       	brcs	.+4      	; 0xbd6 <__udivmodhi4_ep>
 bd2:	a6 1b       	sub	r26, r22
 bd4:	b7 0b       	sbc	r27, r23

00000bd6 <__udivmodhi4_ep>:
 bd6:	88 1f       	adc	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	5a 95       	dec	r21
 bdc:	a9 f7       	brne	.-22     	; 0xbc8 <__udivmodhi4_loop>
 bde:	80 95       	com	r24
 be0:	90 95       	com	r25
 be2:	bc 01       	movw	r22, r24
 be4:	cd 01       	movw	r24, r26
 be6:	08 95       	ret

00000be8 <__eerd_byte_m16>:
 be8:	e1 99       	sbic	0x1c, 1	; 28
 bea:	fe cf       	rjmp	.-4      	; 0xbe8 <__eerd_byte_m16>
 bec:	9f bb       	out	0x1f, r25	; 31
 bee:	8e bb       	out	0x1e, r24	; 30
 bf0:	e0 9a       	sbi	0x1c, 0	; 28
 bf2:	99 27       	eor	r25, r25
 bf4:	8d b3       	in	r24, 0x1d	; 29
 bf6:	08 95       	ret

00000bf8 <__eewr_byte_m16>:
 bf8:	26 2f       	mov	r18, r22

00000bfa <__eewr_r18_m16>:
 bfa:	e1 99       	sbic	0x1c, 1	; 28
 bfc:	fe cf       	rjmp	.-4      	; 0xbfa <__eewr_r18_m16>
 bfe:	9f bb       	out	0x1f, r25	; 31
 c00:	8e bb       	out	0x1e, r24	; 30
 c02:	2d bb       	out	0x1d, r18	; 29
 c04:	0f b6       	in	r0, 0x3f	; 63
 c06:	f8 94       	cli
 c08:	e2 9a       	sbi	0x1c, 2	; 28
 c0a:	e1 9a       	sbi	0x1c, 1	; 28
 c0c:	0f be       	out	0x3f, r0	; 63
 c0e:	01 96       	adiw	r24, 0x01	; 1
 c10:	08 95       	ret

00000c12 <_exit>:
 c12:	f8 94       	cli

00000c14 <__stop_program>:
 c14:	ff cf       	rjmp	.-2      	; 0xc14 <__stop_program>
