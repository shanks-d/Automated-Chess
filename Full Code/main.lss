
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00001a5c  00001af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  008000e8  008000e8  00001b78  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000053d  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000183b  00000000  00000000  000020d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000395  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016e2  00000000  00000000  00003ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000390  00000000  00000000  00005388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050d  00000000  00000000  00005718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ea2  00000000  00000000  00005c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00006ac7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 09 	call	0x1212	; 0x1212 <main>
      8a:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:
#define threshold 100

//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <pwm2_init>:
{
/*PWM2_DIR=1;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;*/
TCCR2=0x69;
      ca:	89 e6       	ldi	r24, 0x69	; 105
      cc:	85 bd       	out	0x25, r24	; 37
}
      ce:	08 95       	ret

000000d0 <pwm0_init>:
/*
PWM0_DIR=1;
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;*/
TCCR0=0x69;
      d0:	89 e6       	ldi	r24, 0x69	; 105
      d2:	83 bf       	out	0x33, r24	; 51
}
      d4:	08 95       	ret

000000d6 <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      d6:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      d8:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      da:	80 e6       	ldi	r24, 0x60	; 96
      dc:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      de:	87 e8       	ldi	r24, 0x87	; 135
      e0:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	88 b9       	out	0x08, r24	; 8
}
      e6:	08 95       	ret

000000e8 <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      e8:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      ea:	87 70       	andi	r24, 0x07	; 7
      ec:	80 66       	ori	r24, 0x60	; 96
      ee:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      f0:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      f2:	36 99       	sbic	0x06, 6	; 6
      f4:	fe cf       	rjmp	.-4      	; 0xf2 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      f6:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      f8:	08 95       	ret

000000fa <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      fa:	ac 01       	movw	r20, r24
      fc:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      fe:	60 e9       	ldi	r22, 0x90	; 144
     100:	71 e0       	ldi	r23, 0x01	; 1
     102:	0c c0       	rjmp	.+24     	; 0x11c <delay_sec+0x22>
     104:	fb 01       	movw	r30, r22
     106:	31 97       	sbiw	r30, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     10a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     10c:	d9 f7       	brne	.-10     	; 0x104 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     10e:	2f 5f       	subi	r18, 0xFF	; 255
     110:	24 30       	cpi	r18, 0x04	; 4
     112:	19 f0       	breq	.+6      	; 0x11a <delay_sec+0x20>
     114:	84 ec       	ldi	r24, 0xC4	; 196
     116:	99 e0       	ldi	r25, 0x09	; 9
     118:	f5 cf       	rjmp	.-22     	; 0x104 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     11a:	3f 5f       	subi	r19, 0xFF	; 255
     11c:	83 2f       	mov	r24, r19
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	84 17       	cp	r24, r20
     122:	95 07       	cpc	r25, r21
     124:	14 f4       	brge	.+4      	; 0x12a <delay_sec+0x30>
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	f5 cf       	rjmp	.-22     	; 0x114 <delay_sec+0x1a>
     12a:	08 95       	ret

0000012c <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
	_delay_ms(n);
     13c:	aa 27       	eor	r26, r26
     13e:	97 fd       	sbrc	r25, 7
     140:	a0 95       	com	r26
     142:	ba 2f       	mov	r27, r26
     144:	bc 01       	movw	r22, r24
     146:	cd 01       	movw	r24, r26
     148:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__floatsisf>
     14c:	5b 01       	movw	r10, r22
     14e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	4a e7       	ldi	r20, 0x7A	; 122
     156:	55 e4       	ldi	r21, 0x45	; 69
     158:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
     15c:	7b 01       	movw	r14, r22
     15e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e8       	ldi	r20, 0x80	; 128
     166:	5f e3       	ldi	r21, 0x3F	; 63
     168:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__cmpsf2>
     16c:	88 23       	and	r24, r24
     16e:	1c f4       	brge	.+6      	; 0x176 <delay_millisec+0x4a>
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	24 c0       	rjmp	.+72     	; 0x1be <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     176:	c8 01       	movw	r24, r16
     178:	b7 01       	movw	r22, r14
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	3f ef       	ldi	r19, 0xFF	; 255
     17e:	4f e7       	ldi	r20, 0x7F	; 127
     180:	57 e4       	ldi	r21, 0x47	; 71
     182:	0e 94 89 0c 	call	0x1912	; 0x1912 <__gesf2>
     186:	18 16       	cp	r1, r24
     188:	b4 f4       	brge	.+44     	; 0x1b6 <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     18a:	c6 01       	movw	r24, r12
     18c:	b5 01       	movw	r22, r10
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e2       	ldi	r20, 0x20	; 32
     194:	51 e4       	ldi	r21, 0x41	; 65
     196:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
     19a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fixunssfsi>
     19e:	80 e9       	ldi	r24, 0x90	; 144
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	05 c0       	rjmp	.+10     	; 0x1ae <delay_millisec+0x82>
     1a4:	fc 01       	movw	r30, r24
     1a6:	31 97       	sbiw	r30, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1aa:	61 50       	subi	r22, 0x01	; 1
     1ac:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ae:	61 15       	cp	r22, r1
     1b0:	71 05       	cpc	r23, r1
     1b2:	c1 f7       	brne	.-16     	; 0x1a4 <delay_millisec+0x78>
     1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1b6:	c8 01       	movw	r24, r16
     1b8:	b7 01       	movw	r22, r14
     1ba:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fixunssfsi>
     1be:	cb 01       	movw	r24, r22
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <delay_millisec+0x94>
}
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	df 90       	pop	r13
     1ce:	cf 90       	pop	r12
     1d0:	bf 90       	pop	r11
     1d2:	af 90       	pop	r10
     1d4:	08 95       	ret

000001d6 <delay_microsec>:

void delay_microsec(int n)
{
     1d6:	af 92       	push	r10
     1d8:	bf 92       	push	r11
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
	_delay_us(n);
     1e6:	aa 27       	eor	r26, r26
     1e8:	97 fd       	sbrc	r25, 7
     1ea:	a0 95       	com	r26
     1ec:	ba 2f       	mov	r27, r26
     1ee:	bc 01       	movw	r22, r24
     1f0:	cd 01       	movw	r24, r26
     1f2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__floatsisf>
     1f6:	5b 01       	movw	r10, r22
     1f8:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1fa:	2b ea       	ldi	r18, 0xAB	; 171
     1fc:	3a ea       	ldi	r19, 0xAA	; 170
     1fe:	4a ea       	ldi	r20, 0xAA	; 170
     200:	50 e4       	ldi	r21, 0x40	; 64
     202:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
     206:	7b 01       	movw	r14, r22
     208:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e8       	ldi	r20, 0x80	; 128
     210:	5f e3       	ldi	r21, 0x3F	; 63
     212:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__cmpsf2>
     216:	88 23       	and	r24, r24
     218:	14 f4       	brge	.+4      	; 0x21e <delay_microsec+0x48>
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	54 c0       	rjmp	.+168    	; 0x2c6 <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     21e:	c8 01       	movw	r24, r16
     220:	b7 01       	movw	r22, r14
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	4f e7       	ldi	r20, 0x7F	; 127
     228:	53 e4       	ldi	r21, 0x43	; 67
     22a:	0e 94 89 0c 	call	0x1912	; 0x1912 <__gesf2>
     22e:	18 16       	cp	r1, r24
     230:	0c f0       	brlt	.+2      	; 0x234 <delay_microsec+0x5e>
     232:	45 c0       	rjmp	.+138    	; 0x2be <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     234:	c6 01       	movw	r24, r12
     236:	b5 01       	movw	r22, r10
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	4a e7       	ldi	r20, 0x7A	; 122
     23e:	54 e4       	ldi	r21, 0x44	; 68
     240:	0e 94 3e 0b 	call	0x167c	; 0x167c <__divsf3>
     244:	5b 01       	movw	r10, r22
     246:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	4a e7       	ldi	r20, 0x7A	; 122
     24e:	55 e4       	ldi	r21, 0x45	; 69
     250:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
     254:	7b 01       	movw	r14, r22
     256:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e8       	ldi	r20, 0x80	; 128
     25e:	5f e3       	ldi	r21, 0x3F	; 63
     260:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__cmpsf2>
     264:	88 23       	and	r24, r24
     266:	1c f4       	brge	.+6      	; 0x26e <delay_microsec+0x98>
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	24 c0       	rjmp	.+72     	; 0x2b6 <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     26e:	c8 01       	movw	r24, r16
     270:	b7 01       	movw	r22, r14
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	3f ef       	ldi	r19, 0xFF	; 255
     276:	4f e7       	ldi	r20, 0x7F	; 127
     278:	57 e4       	ldi	r21, 0x47	; 71
     27a:	0e 94 89 0c 	call	0x1912	; 0x1912 <__gesf2>
     27e:	18 16       	cp	r1, r24
     280:	b4 f4       	brge	.+44     	; 0x2ae <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     282:	c6 01       	movw	r24, r12
     284:	b5 01       	movw	r22, r10
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e2       	ldi	r20, 0x20	; 32
     28c:	51 e4       	ldi	r21, 0x41	; 65
     28e:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
     292:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fixunssfsi>
     296:	80 e9       	ldi	r24, 0x90	; 144
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <delay_microsec+0xd0>
     29c:	fc 01       	movw	r30, r24
     29e:	31 97       	sbiw	r30, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a2:	61 50       	subi	r22, 0x01	; 1
     2a4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a6:	61 15       	cp	r22, r1
     2a8:	71 05       	cpc	r23, r1
     2aa:	c1 f7       	brne	.-16     	; 0x29c <delay_microsec+0xc6>
     2ac:	0e c0       	rjmp	.+28     	; 0x2ca <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ae:	c8 01       	movw	r24, r16
     2b0:	b7 01       	movw	r22, r14
     2b2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fixunssfsi>
     2b6:	cb 01       	movw	r24, r22
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <delay_microsec+0xe2>
     2bc:	06 c0       	rjmp	.+12     	; 0x2ca <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c6:	6a 95       	dec	r22
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <delay_microsec+0xf0>
}
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	bf 90       	pop	r11
     2d8:	af 90       	pop	r10
     2da:	08 95       	ret

000002dc <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
sensorbyte=0;
     2e4:	10 92 e8 00 	sts	0x00E8, r1
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2ec:	01 e0       	ldi	r16, 0x01	; 1
     2ee:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2f0:	8c 2f       	mov	r24, r28
     2f2:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
	  if(temp[i]<threshold)
     2f6:	84 36       	cpi	r24, 0x64	; 100
     2f8:	60 f4       	brcc	.+24     	; 0x312 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2fa:	98 01       	movw	r18, r16
     2fc:	0c 2e       	mov	r0, r28
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <check_sensors+0x28>
     300:	22 0f       	add	r18, r18
     302:	33 1f       	adc	r19, r19
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <check_sensors+0x24>
     308:	80 91 e8 00 	lds	r24, 0x00E8
     30c:	82 2b       	or	r24, r18
     30e:	80 93 e8 00 	sts	0x00E8, r24
     312:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     314:	c4 30       	cpi	r28, 0x04	; 4
     316:	d1 05       	cpc	r29, r1
     318:	59 f7       	brne	.-42     	; 0x2f0 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	08 95       	ret

00000324 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     32a:	80 93 2b 01 	sts	0x012B, r24
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     334:	80 93 2c 01 	sts	0x012C, r24
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     33e:	80 93 2d 01 	sts	0x012D, r24
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     348:	80 93 2e 01 	sts	0x012E, r24
	}

		
}
     34c:	08 95       	ret

0000034e <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     354:	80 93 33 01 	sts	0x0133, r24
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     35e:	80 93 34 01 	sts	0x0134, r24
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     368:	80 93 35 01 	sts	0x0135, r24
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 74 00 	call	0xe8	; 0xe8 <adc_start>
     372:	80 93 36 01 	sts	0x0136, r24
 	}

		
}
     376:	08 95       	ret

00000378 <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	c0 e0       	ldi	r28, 0x00	; 0
     380:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     382:	1f ef       	ldi	r17, 0xFF	; 255
     384:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     386:	84 e6       	ldi	r24, 0x64	; 100
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 96 00 	call	0x12c	; 0x12c <delay_millisec>
		LED=0x00;
     38e:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     390:	84 e6       	ldi	r24, 0x64	; 100
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 96 00 	call	0x12c	; 0x12c <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     398:	21 96       	adiw	r28, 0x01	; 1
     39a:	c5 30       	cpi	r28, 0x05	; 5
     39c:	d1 05       	cpc	r29, r1
     39e:	91 f7       	brne	.-28     	; 0x384 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     3a8:	9b bd       	out	0x2b, r25	; 43
     3aa:	8a bd       	out	0x2a, r24	; 42
}
     3ac:	08 95       	ret

000003ae <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3ae:	99 bd       	out	0x29, r25	; 41
     3b0:	88 bd       	out	0x28, r24	; 40
}
     3b2:	08 95       	ret

000003b4 <set_pwm2>:

//SET PWM2
void set_pwm2(int c)
{
OCR2=c;
     3b4:	83 bd       	out	0x23, r24	; 35
}
     3b6:	08 95       	ret

000003b8 <set_pwm0>:

//SET PWM0
void set_pwm0(int d)
{
OCR0=d;
     3b8:	8c bf       	out	0x3c, r24	; 60
}
     3ba:	08 95       	ret

000003bc <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3bc:	87 b3       	in	r24, 0x17	; 23
     3be:	80 7f       	andi	r24, 0xF0	; 240
     3c0:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3c2:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3c4:	c5 98       	cbi	0x18, 5	; 24
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	8a 95       	dec	r24
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3cc:	22 e0       	ldi	r18, 0x02	; 2
     3ce:	35 e0       	ldi	r19, 0x05	; 5
     3d0:	c7 9a       	sbi	0x18, 7	; 24
     3d2:	82 2f       	mov	r24, r18
     3d4:	8a 95       	dec	r24
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3d8:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3da:	82 95       	swap	r24
     3dc:	80 7f       	andi	r24, 0xF0	; 240
     3de:	92 2f       	mov	r25, r18
     3e0:	9a 95       	dec	r25
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3e4:	c7 98       	cbi	0x18, 7	; 24
     3e6:	93 2f       	mov	r25, r19
     3e8:	9a 95       	dec	r25
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3ec:	c7 9a       	sbi	0x18, 7	; 24
     3ee:	92 2f       	mov	r25, r18
     3f0:	9a 95       	dec	r25
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3f4:	96 b3       	in	r25, 0x16	; 22
     3f6:	92 2f       	mov	r25, r18
     3f8:	9a 95       	dec	r25
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3fc:	c7 98       	cbi	0x18, 7	; 24
     3fe:	93 2f       	mov	r25, r19
     400:	9a 95       	dec	r25
     402:	f1 f7       	brne	.-4      	; 0x400 <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     404:	87 fd       	sbrc	r24, 7
     406:	e4 cf       	rjmp	.-56     	; 0x3d0 <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     408:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     40a:	87 b3       	in	r24, 0x17	; 23
     40c:	8f 60       	ori	r24, 0x0F	; 15
     40e:	87 bb       	out	0x17, r24	; 23

}
     410:	08 95       	ret

00000412 <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     412:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     414:	66 23       	and	r22, r22
     416:	11 f4       	brne	.+4      	; 0x41c <lcd_byte+0xa>
	CLEAR_RS();
     418:	c5 98       	cbi	0x18, 5	; 24
     41a:	01 c0       	rjmp	.+2      	; 0x41e <lcd_byte+0xc>
else
	SET_RS();
     41c:	c5 9a       	sbi	0x18, 5	; 24
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	8a 95       	dec	r24
     422:	f1 f7       	brne	.-4      	; 0x420 <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     424:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     426:	88 b3       	in	r24, 0x18	; 24
     428:	92 2f       	mov	r25, r18
     42a:	92 95       	swap	r25
     42c:	9f 70       	andi	r25, 0x0F	; 15
     42e:	80 7f       	andi	r24, 0xF0	; 240
     430:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     432:	98 bb       	out	0x18, r25	; 24
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	89 2f       	mov	r24, r25
     438:	8a 95       	dec	r24
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     43c:	c7 98       	cbi	0x18, 7	; 24
     43e:	89 2f       	mov	r24, r25
     440:	8a 95       	dec	r24
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     444:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     446:	88 b3       	in	r24, 0x18	; 24
     448:	2f 70       	andi	r18, 0x0F	; 15
     44a:	80 7f       	andi	r24, 0xF0	; 240
     44c:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     44e:	88 bb       	out	0x18, r24	; 24
     450:	89 2f       	mov	r24, r25
     452:	8a 95       	dec	r24
     454:	f1 f7       	brne	.-4      	; 0x452 <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     456:	c7 98       	cbi	0x18, 7	; 24
     458:	9a 95       	dec	r25
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     45c:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd_busy_loop>
}
     460:	08 95       	ret

00000462 <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     462:	1f 93       	push	r17
     464:	18 2f       	mov	r17, r24
     466:	8c e2       	ldi	r24, 0x2C	; 44
     468:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     46a:	20 e9       	ldi	r18, 0x90	; 144
     46c:	31 e0       	ldi	r19, 0x01	; 1
     46e:	f9 01       	movw	r30, r18
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     474:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     476:	d9 f7       	brne	.-10     	; 0x46e <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     478:	87 b3       	in	r24, 0x17	; 23
     47a:	8f 60       	ori	r24, 0x0F	; 15
     47c:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     47e:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     480:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     482:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     484:	88 b3       	in	r24, 0x18	; 24
     486:	80 7f       	andi	r24, 0xF0	; 240
     488:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     48a:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     48c:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     48e:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	8a 95       	dec	r24
     494:	f1 f7       	brne	.-4      	; 0x492 <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
     496:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     498:	c1 9a       	sbi	0x18, 1	; 24
     49a:	85 e0       	ldi	r24, 0x05	; 5
     49c:	98 2f       	mov	r25, r24
     49e:	9a 95       	dec	r25
     4a0:	f1 f7       	brne	.-4      	; 0x49e <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
     4a2:	c7 98       	cbi	0x18, 7	; 24
     4a4:	8a 95       	dec	r24
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     4a8:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     4ac:	81 2f       	mov	r24, r17
     4ae:	8c 60       	ori	r24, 0x0C	; 12
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4b6:	88 e2       	ldi	r24, 0x28	; 40
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
}
     4be:	1f 91       	pop	r17
     4c0:	08 95       	ret

000004c2 <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	ec 01       	movw	r28, r24
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	msg++;
     4d0:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4d2:	88 81       	ld	r24, Y
     4d4:	88 23       	and	r24, r24
     4d6:	c9 f7       	brne	.-14     	; 0x4ca <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	df 93       	push	r29
     4e8:	cf 93       	push	r28
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <lcd_write_int+0xe>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <lcd_write_int+0x10>
     4ee:	0f 92       	push	r0
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9c 01       	movw	r18, r24
     4f6:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4f8:	fe 01       	movw	r30, r28
     4fa:	31 96       	adiw	r30, 0x01	; 1
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	df 01       	movw	r26, r30
     500:	1d 92       	st	X+, r1
     502:	8a 95       	dec	r24
     504:	e9 f7       	brne	.-6      	; 0x500 <lcd_write_int+0x22>
     506:	fe 01       	movw	r30, r28
     508:	35 96       	adiw	r30, 0x05	; 5
     50a:	0d c0       	rjmp	.+26     	; 0x526 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     50c:	c9 01       	movw	r24, r18
     50e:	6a e0       	ldi	r22, 0x0A	; 10
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__divmodhi4>
     516:	80 83       	st	Z, r24
	val=val/10;
     518:	c9 01       	movw	r24, r18
     51a:	6a e0       	ldi	r22, 0x0A	; 10
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__divmodhi4>
     522:	9b 01       	movw	r18, r22
     524:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     526:	21 15       	cp	r18, r1
     528:	31 05       	cpc	r19, r1
     52a:	81 f7       	brne	.-32     	; 0x50c <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     52c:	bf ef       	ldi	r27, 0xFF	; 255
     52e:	0f 3f       	cpi	r16, 0xFF	; 255
     530:	1b 07       	cpc	r17, r27
     532:	79 f4       	brne	.+30     	; 0x552 <lcd_write_int+0x74>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     538:	ae 01       	movw	r20, r28
     53a:	4f 5f       	subi	r20, 0xFF	; 255
     53c:	5f 4f       	sbci	r21, 0xFF	; 255
     53e:	02 c0       	rjmp	.+4      	; 0x544 <lcd_write_int+0x66>
     540:	2f 5f       	subi	r18, 0xFF	; 255
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	fa 01       	movw	r30, r20
     546:	e2 0f       	add	r30, r18
     548:	f3 1f       	adc	r31, r19
     54a:	80 81       	ld	r24, Z
     54c:	88 23       	and	r24, r24
     54e:	c1 f3       	breq	.-16     	; 0x540 <lcd_write_int+0x62>
     550:	04 c0       	rjmp	.+8      	; 0x55a <lcd_write_int+0x7c>
	else
		j=5-field_length;
     552:	25 e0       	ldi	r18, 0x05	; 5
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	20 1b       	sub	r18, r16
     558:	31 0b       	sbc	r19, r17
     55a:	7e 01       	movw	r14, r28
     55c:	08 94       	sec
     55e:	e1 1c       	adc	r14, r1
     560:	f1 1c       	adc	r15, r1
     562:	e2 0e       	add	r14, r18
     564:	f3 1e       	adc	r15, r19
     566:	89 01       	movw	r16, r18
     568:	09 c0       	rjmp	.+18     	; 0x57c <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     56a:	f7 01       	movw	r30, r14
     56c:	81 91       	ld	r24, Z+
     56e:	7f 01       	movw	r14, r30
     570:	80 5d       	subi	r24, 0xD0	; 208
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     578:	0f 5f       	subi	r16, 0xFF	; 255
     57a:	1f 4f       	sbci	r17, 0xFF	; 255
     57c:	05 30       	cpi	r16, 0x05	; 5
     57e:	11 05       	cpc	r17, r1
     580:	a4 f3       	brlt	.-24     	; 0x56a <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	cf 91       	pop	r28
     58e:	df 91       	pop	r29
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	08 95       	ret

0000059a <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     59a:	88 32       	cpi	r24, 0x28	; 40
     59c:	30 f4       	brcc	.+12     	; 0x5aa <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     59e:	61 11       	cpse	r22, r1
     5a0:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     5a2:	80 68       	ori	r24, 0x80	; 128
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
     5aa:	08 95       	ret

000005ac <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     5b2:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_goto_xy>
 lcd_write_string(msg);
     5b6:	c8 01       	movw	r24, r16
     5b8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_write_string>
}
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	8a 01       	movw	r16, r20
     5cc:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ce:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_goto_xy>
 lcd_write_int(val,fl);
     5d2:	c8 01       	movw	r24, r16
     5d4:	b7 01       	movw	r22, r14
     5d6:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_write_int>
}
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	08 95       	ret

000005e4 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5e4:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5e6:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5e8:	87 e0       	ldi	r24, 0x07	; 7
     5ea:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5ec:	87 e6       	ldi	r24, 0x67	; 103
     5ee:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5f0:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5f2:	88 e9       	ldi	r24, 0x98	; 152
     5f4:	8a b9       	out	0x0a, r24	; 10
}
     5f6:	08 95       	ret

000005f8 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f8:	5d 9b       	sbis	0x0b, 5	; 11
     5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5fc:	8c b9       	out	0x0c, r24	; 12
}
     5fe:	08 95       	ret

00000600 <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     600:	fc 01       	movw	r30, r24
     602:	04 c0       	rjmp	.+8      	; 0x60c <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     604:	5d 9b       	sbis	0x0b, 5	; 11
     606:	fe cf       	rjmp	.-4      	; 0x604 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     608:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     60a:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     60c:	80 81       	ld	r24, Z
     60e:	88 23       	and	r24, r24
     610:	c9 f7       	brne	.-14     	; 0x604 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     612:	08 95       	ret

00000614 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     614:	5d 9b       	sbis	0x0b, 5	; 11
     616:	fe cf       	rjmp	.-4      	; 0x614 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     618:	8a e0       	ldi	r24, 0x0A	; 10
     61a:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     61c:	5d 9b       	sbis	0x0b, 5	; 11
     61e:	fe cf       	rjmp	.-4      	; 0x61c <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     620:	8d e0       	ldi	r24, 0x0D	; 13
     622:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     624:	08 95       	ret

00000626 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     626:	5f 9b       	sbis	0x0b, 7	; 11
     628:	fe cf       	rjmp	.-4      	; 0x626 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     62a:	8c b1       	in	r24, 0x0c	; 12
}
     62c:	08 95       	ret

0000062e <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	84 bb       	out	0x14, r24	; 20
}
     632:	08 95       	ret

00000634 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     634:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     638:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     640:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     642:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     644:	af 98       	cbi	0x15, 7	; 21
}
     646:	08 95       	ret

00000648 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     648:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     64c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     64e:	af 98       	cbi	0x15, 7	; 21
}
     650:	08 95       	ret

00000652 <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     656:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     658:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     65a:	08 95       	ret

0000065c <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     660:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     664:	08 95       	ret

00000666 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     668:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     670:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     672:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     67a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     67c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     686:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     688:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     690:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     692:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     698:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     69a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     69c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     69e:	af 98       	cbi	0x15, 7	; 21
}
     6a0:	08 95       	ret

000006a2 <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     6a2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     6a4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     6a6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     6a8:	af 9a       	sbi	0x15, 7	; 21
}
     6aa:	08 95       	ret

000006ac <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     6ac:	82 b3       	in	r24, 0x12	; 18
     6ae:	8f 60       	ori	r24, 0x0F	; 15
     6b0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     6b2:	81 b3       	in	r24, 0x11	; 17
     6b4:	80 7f       	andi	r24, 0xF0	; 240
     6b6:	81 bb       	out	0x11, r24	; 17
}
     6b8:	08 95       	ret

000006ba <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6ba:	20 b3       	in	r18, 0x10	; 16
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	20 95       	com	r18
     6d4:	30 95       	com	r19
     6d6:	21 70       	andi	r18, 0x01	; 1
     6d8:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6da:	c9 01       	movw	r24, r18
     6dc:	08 95       	ret

000006de <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6de:	20 b3       	in	r18, 0x10	; 16
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	36 95       	lsr	r19
     6e4:	27 95       	ror	r18
     6e6:	36 95       	lsr	r19
     6e8:	27 95       	ror	r18
     6ea:	20 95       	com	r18
     6ec:	30 95       	com	r19
     6ee:	21 70       	andi	r18, 0x01	; 1
     6f0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f2:	c9 01       	movw	r24, r18
     6f4:	08 95       	ret

000006f6 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6f6:	20 b3       	in	r18, 0x10	; 16
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	43 e0       	ldi	r20, 0x03	; 3
     6fc:	36 95       	lsr	r19
     6fe:	27 95       	ror	r18
     700:	4a 95       	dec	r20
     702:	e1 f7       	brne	.-8      	; 0x6fc <pressed_switch3+0x6>
     704:	20 95       	com	r18
     706:	30 95       	com	r19
     708:	21 70       	andi	r18, 0x01	; 1
     70a:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     70c:	c9 01       	movw	r24, r18
     70e:	08 95       	ret

00000710 <magnet_up>:
int temp_keys=0, temp_xy1=0, temp_xy2=0, temp_lcd1=0, temp_lcd2=0;
int temp_bump=0;

void magnet_up()
{
lcd_clear();
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
temp_bump=0;
     718:	10 92 2a 01 	sts	0x012A, r1
     71c:	10 92 29 01 	sts	0x0129, r1
     720:	19 c0       	rjmp	.+50     	; 0x754 <magnet_up+0x44>
while(bit_is_set(PIND,1))
{
	if(temp_bump==0)
     722:	80 91 29 01 	lds	r24, 0x0129
     726:	90 91 2a 01 	lds	r25, 0x012A
     72a:	89 2b       	or	r24, r25
     72c:	51 f4       	brne	.+20     	; 0x742 <magnet_up+0x32>
	{
		lcd_write_string_xy(5,1,"MOVE UP");
     72e:	85 e0       	ldi	r24, 0x05	; 5
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	40 e6       	ldi	r20, 0x60	; 96
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
		sbi(PORTC,0);
     73e:	a8 9a       	sbi	0x15, 0	; 21
		cbi(PORTC,1);
     740:	a9 98       	cbi	0x15, 1	; 21
	}
	temp_bump++;
     742:	80 91 29 01 	lds	r24, 0x0129
     746:	90 91 2a 01 	lds	r25, 0x012A
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	90 93 2a 01 	sts	0x012A, r25
     750:	80 93 29 01 	sts	0x0129, r24

void magnet_up()
{
lcd_clear();
temp_bump=0;
while(bit_is_set(PIND,1))
     754:	81 99       	sbic	0x10, 1	; 16
     756:	e5 cf       	rjmp	.-54     	; 0x722 <magnet_up+0x12>
		cbi(PORTC,1);
	}
	temp_bump++;
}

temp_bump=0;
     758:	10 92 2a 01 	sts	0x012A, r1
     75c:	10 92 29 01 	sts	0x0129, r1
     760:	1d c0       	rjmp	.+58     	; 0x79c <magnet_up+0x8c>
while(bit_is_set(PIND,0))
{
	
	if(temp_bump==0)
     762:	80 91 29 01 	lds	r24, 0x0129
     766:	90 91 2a 01 	lds	r25, 0x012A
     76a:	89 2b       	or	r24, r25
     76c:	71 f4       	brne	.+28     	; 0x78a <magnet_up+0x7a>
	{
		lcd_clear();
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
		lcd_write_string_xy(5,0,"MOVE UP");
     776:	85 e0       	ldi	r24, 0x05	; 5
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	40 e6       	ldi	r20, 0x60	; 96
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
		sbi(PORTC,0);
     786:	a8 9a       	sbi	0x15, 0	; 21
		cbi(PORTC,1);
     788:	a9 98       	cbi	0x15, 1	; 21
	}
	temp_bump++;
     78a:	80 91 29 01 	lds	r24, 0x0129
     78e:	90 91 2a 01 	lds	r25, 0x012A
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	90 93 2a 01 	sts	0x012A, r25
     798:	80 93 29 01 	sts	0x0129, r24
	}
	temp_bump++;
}

temp_bump=0;
while(bit_is_set(PIND,0))
     79c:	80 99       	sbic	0x10, 0	; 16
     79e:	e1 cf       	rjmp	.-62     	; 0x762 <magnet_up+0x52>
		cbi(PORTC,1);
	}
	temp_bump++;
}

}
     7a0:	08 95       	ret

000007a2 <magnet_down>:

void magnet_down()
{
lcd_clear();
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
temp_bump=0;
     7aa:	10 92 2a 01 	sts	0x012A, r1
     7ae:	10 92 29 01 	sts	0x0129, r1
     7b2:	1d c0       	rjmp	.+58     	; 0x7ee <magnet_down+0x4c>
while(bit_is_clear(PIND,0))
{
	if(temp_bump==0)
     7b4:	80 91 29 01 	lds	r24, 0x0129
     7b8:	90 91 2a 01 	lds	r25, 0x012A
     7bc:	89 2b       	or	r24, r25
     7be:	71 f4       	brne	.+28     	; 0x7dc <magnet_down+0x3a>
	{
		lcd_clear();
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
		lcd_write_string_xy(5,0,"MOVE DOWN");
     7c8:	85 e0       	ldi	r24, 0x05	; 5
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	48 e6       	ldi	r20, 0x68	; 104
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
		cbi(PORTC,0);
     7d8:	a8 98       	cbi	0x15, 0	; 21
		sbi(PORTC,1);
     7da:	a9 9a       	sbi	0x15, 1	; 21
	}
	temp_bump++;
     7dc:	80 91 29 01 	lds	r24, 0x0129
     7e0:	90 91 2a 01 	lds	r25, 0x012A
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	90 93 2a 01 	sts	0x012A, r25
     7ea:	80 93 29 01 	sts	0x0129, r24

void magnet_down()
{
lcd_clear();
temp_bump=0;
while(bit_is_clear(PIND,0))
     7ee:	80 9b       	sbis	0x10, 0	; 16
     7f0:	e1 cf       	rjmp	.-62     	; 0x7b4 <magnet_down+0x12>
		sbi(PORTC,1);
	}
	temp_bump++;
}

temp_bump=0;
     7f2:	10 92 2a 01 	sts	0x012A, r1
     7f6:	10 92 29 01 	sts	0x0129, r1
     7fa:	1d c0       	rjmp	.+58     	; 0x836 <magnet_down+0x94>
while(bit_is_clear(PIND,1))
{
	if(temp_bump==0)
     7fc:	80 91 29 01 	lds	r24, 0x0129
     800:	90 91 2a 01 	lds	r25, 0x012A
     804:	89 2b       	or	r24, r25
     806:	71 f4       	brne	.+28     	; 0x824 <magnet_down+0x82>
	{
		lcd_clear();
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
		lcd_write_string_xy(5,1,"MOVE DOWN");
     810:	85 e0       	ldi	r24, 0x05	; 5
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	48 e6       	ldi	r20, 0x68	; 104
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
		cbi(PORTC,0);
     820:	a8 98       	cbi	0x15, 0	; 21
		sbi(PORTC,1);
     822:	a9 9a       	sbi	0x15, 1	; 21
	}
	temp_bump++;
     824:	80 91 29 01 	lds	r24, 0x0129
     828:	90 91 2a 01 	lds	r25, 0x012A
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	90 93 2a 01 	sts	0x012A, r25
     832:	80 93 29 01 	sts	0x0129, r24
	}
	temp_bump++;
}

temp_bump=0;
while(bit_is_clear(PIND,1))
     836:	81 9b       	sbis	0x10, 1	; 16
     838:	e1 cf       	rjmp	.-62     	; 0x7fc <magnet_down+0x5a>
		sbi(PORTC,1);
	}
	temp_bump++;
}

}
     83a:	08 95       	ret

0000083c <x_pos>:

void x_pos(int b)
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	9c 01       	movw	r18, r24
	if(b==0)
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	69 f4       	brne	.+26     	; 0x860 <x_pos+0x24>
	{
		val_x = 0;
     846:	10 92 08 01 	sts	0x0108, r1
     84a:	10 92 07 01 	sts	0x0107, r1
		cbi(PORTC,3);
     84e:	ab 98       	cbi	0x15, 3	; 21
		cbi(PORTC,2);
     850:	aa 98       	cbi	0x15, 2	; 21
		temp_pos_x = 1;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	90 93 1c 01 	sts	0x011C, r25
     85a:	80 93 1b 01 	sts	0x011B, r24
     85e:	14 c0       	rjmp	.+40     	; 0x888 <x_pos+0x4c>
	}
	
	else if(b>0)
     860:	18 16       	cp	r1, r24
     862:	19 06       	cpc	r1, r25
     864:	3c f4       	brge	.+14     	; 0x874 <x_pos+0x38>
	{
		val_x = b;
     866:	90 93 08 01 	sts	0x0108, r25
     86a:	80 93 07 01 	sts	0x0107, r24
		sbi(PORTC,3);
     86e:	ab 9a       	sbi	0x15, 3	; 21
		cbi(PORTC,2);
     870:	aa 98       	cbi	0x15, 2	; 21
     872:	0a c0       	rjmp	.+20     	; 0x888 <x_pos+0x4c>
	}
	
	else if(b<0)
	{
		val_x = -b;
     874:	88 27       	eor	r24, r24
     876:	99 27       	eor	r25, r25
     878:	82 1b       	sub	r24, r18
     87a:	93 0b       	sbc	r25, r19
     87c:	90 93 08 01 	sts	0x0108, r25
     880:	80 93 07 01 	sts	0x0107, r24
		cbi(PORTC,3);
     884:	ab 98       	cbi	0x15, 3	; 21
		sbi(PORTC,2);
     886:	aa 9a       	sbi	0x15, 2	; 21
	}

	//val_x = b;

	if(bit_is_set(PIND,6))
     888:	86 9b       	sbis	0x10, 6	; 16
     88a:	06 c0       	rjmp	.+12     	; 0x898 <x_pos+0x5c>
	{
		prev_val7=1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	90 93 14 01 	sts	0x0114, r25
     894:	80 93 13 01 	sts	0x0113, r24
	}
	
	sbi(PORTC,3);
     898:	ab 9a       	sbi	0x15, 3	; 21
	cbi(PORTC,2);
     89a:	aa 98       	cbi	0x15, 2	; 21
}

//SET PWM2
void set_pwm2(int c)
{
OCR2=c;
     89c:	86 e9       	ldi	r24, 0x96	; 150
     89e:	83 bd       	out	0x23, r24	; 35
	set_pwm2(150);
	lcd_clear();
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	lcd_write_int_xy(7,0,val_x,3);
     8a8:	40 91 07 01 	lds	r20, 0x0107
     8ac:	50 91 08 01 	lds	r21, 0x0108
     8b0:	87 e0       	ldi	r24, 0x07	; 7
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	23 e0       	ldi	r18, 0x03	; 3
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>

	while(temp_pos_x==0)
	{
		if(bit_is_set(PIND,6))
		{
			curr_val7=1;
     8c0:	c1 e0       	ldi	r28, 0x01	; 1
     8c2:	d0 e0       	ldi	r29, 0x00	; 0
     8c4:	4a c0       	rjmp	.+148    	; 0x95a <x_pos+0x11e>
	lcd_clear();
	lcd_write_int_xy(7,0,val_x,3);

	while(temp_pos_x==0)
	{
		if(bit_is_set(PIND,6))
     8c6:	86 9b       	sbis	0x10, 6	; 16
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <x_pos+0x96>
		{
			curr_val7=1;
     8ca:	d0 93 1a 01 	sts	0x011A, r29
     8ce:	c0 93 19 01 	sts	0x0119, r28
		}
		
		if(bit_is_clear(PIND,6))
     8d2:	86 99       	sbic	0x10, 6	; 16
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <x_pos+0xa2>
		{
			curr_val7=0;
     8d6:	10 92 1a 01 	sts	0x011A, r1
     8da:	10 92 19 01 	sts	0x0119, r1
		}
		
		if(prev_val7!=curr_val7)
     8de:	20 91 13 01 	lds	r18, 0x0113
     8e2:	30 91 14 01 	lds	r19, 0x0114
     8e6:	80 91 19 01 	lds	r24, 0x0119
     8ea:	90 91 1a 01 	lds	r25, 0x011A
     8ee:	28 17       	cp	r18, r24
     8f0:	39 07       	cpc	r19, r25
     8f2:	d1 f0       	breq	.+52     	; 0x928 <x_pos+0xec>
		{
			count7++;
     8f4:	40 91 0d 01 	lds	r20, 0x010D
     8f8:	50 91 0e 01 	lds	r21, 0x010E
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	50 93 0e 01 	sts	0x010E, r21
     904:	40 93 0d 01 	sts	0x010D, r20
			lcd_write_int_xy(12,0,count7,3);
     908:	8c e0       	ldi	r24, 0x0C	; 12
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	23 e0       	ldi	r18, 0x03	; 3
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
			prev_val7 = curr_val7;
     918:	80 91 19 01 	lds	r24, 0x0119
     91c:	90 91 1a 01 	lds	r25, 0x011A
     920:	90 93 14 01 	sts	0x0114, r25
     924:	80 93 13 01 	sts	0x0113, r24
		}
		
		if(count7==val_x)
     928:	20 91 0d 01 	lds	r18, 0x010D
     92c:	30 91 0e 01 	lds	r19, 0x010E
     930:	80 91 07 01 	lds	r24, 0x0107
     934:	90 91 08 01 	lds	r25, 0x0108
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	71 f4       	brne	.+28     	; 0x95a <x_pos+0x11e>
		{
			sbi(PORTC,2);
     93e:	aa 9a       	sbi	0x15, 2	; 21
			sbi(PORTC,3);
     940:	ab 9a       	sbi	0x15, 3	; 21
			lcd_write_string_xy(9,1,"STOP");
     942:	89 e0       	ldi	r24, 0x09	; 9
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	42 e7       	ldi	r20, 0x72	; 114
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
			temp_pos_x = 1;
     952:	d0 93 1c 01 	sts	0x011C, r29
     956:	c0 93 1b 01 	sts	0x011B, r28
	cbi(PORTC,2);
	set_pwm2(150);
	lcd_clear();
	lcd_write_int_xy(7,0,val_x,3);

	while(temp_pos_x==0)
     95a:	80 91 1b 01 	lds	r24, 0x011B
     95e:	90 91 1c 01 	lds	r25, 0x011C
     962:	89 2b       	or	r24, r25
     964:	09 f4       	brne	.+2      	; 0x968 <x_pos+0x12c>
     966:	af cf       	rjmp	.-162    	; 0x8c6 <x_pos+0x8a>
			sbi(PORTC,3);
			lcd_write_string_xy(9,1,"STOP");
			temp_pos_x = 1;
		}
	}
	cbi(PORTC,2);
     968:	aa 98       	cbi	0x15, 2	; 21
	cbi(PORTC,3);
     96a:	ab 98       	cbi	0x15, 3	; 21
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <y_pos>:

void y_pos(int a)
{
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ec 01       	movw	r28, r24
	if(y1==y2)
     978:	60 91 fd 00 	lds	r22, 0x00FD
     97c:	70 91 fe 00 	lds	r23, 0x00FE
     980:	80 91 ff 00 	lds	r24, 0x00FF
     984:	90 91 00 01 	lds	r25, 0x0100
     988:	20 91 01 01 	lds	r18, 0x0101
     98c:	30 91 02 01 	lds	r19, 0x0102
     990:	40 91 03 01 	lds	r20, 0x0103
     994:	50 91 04 01 	lds	r21, 0x0104
     998:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__cmpsf2>
     99c:	88 23       	and	r24, r24
     99e:	79 f4       	brne	.+30     	; 0x9be <y_pos+0x4c>
	{
		val_y = 0;
     9a0:	10 92 06 01 	sts	0x0106, r1
     9a4:	10 92 05 01 	sts	0x0105, r1
		cbi(PORTC,4);
     9a8:	ac 98       	cbi	0x15, 4	; 21
		cbi(PORTC,5);
     9aa:	ad 98       	cbi	0x15, 5	; 21
		cbi(PORTC,6);
     9ac:	ae 98       	cbi	0x15, 6	; 21
		cbi(PORTC,7);
     9ae:	af 98       	cbi	0x15, 7	; 21
		temp_pos_y = 1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	90 93 1e 01 	sts	0x011E, r25
     9b8:	80 93 1d 01 	sts	0x011D, r24
     9bc:	1a c0       	rjmp	.+52     	; 0x9f2 <y_pos+0x80>
	}
	
	else if(a>0)
     9be:	1c 16       	cp	r1, r28
     9c0:	1d 06       	cpc	r1, r29
     9c2:	4c f4       	brge	.+18     	; 0x9d6 <y_pos+0x64>
	{
		val_y = a;
     9c4:	d0 93 06 01 	sts	0x0106, r29
     9c8:	c0 93 05 01 	sts	0x0105, r28
		sbi(PORTC,4);
     9cc:	ac 9a       	sbi	0x15, 4	; 21
		cbi(PORTC,5);
     9ce:	ad 98       	cbi	0x15, 5	; 21
		sbi(PORTC,6);
     9d0:	ae 9a       	sbi	0x15, 6	; 21
		cbi(PORTC,7);
     9d2:	af 98       	cbi	0x15, 7	; 21
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <y_pos+0x80>
	}
	
	else if(a<0)
     9d6:	20 97       	sbiw	r28, 0x00	; 0
     9d8:	61 f0       	breq	.+24     	; 0x9f2 <y_pos+0x80>
	{
		val_y = -a;
     9da:	88 27       	eor	r24, r24
     9dc:	99 27       	eor	r25, r25
     9de:	8c 1b       	sub	r24, r28
     9e0:	9d 0b       	sbc	r25, r29
     9e2:	90 93 06 01 	sts	0x0106, r25
     9e6:	80 93 05 01 	sts	0x0105, r24
		cbi(PORTC,4);
     9ea:	ac 98       	cbi	0x15, 4	; 21
		sbi(PORTC,5);
     9ec:	ad 9a       	sbi	0x15, 5	; 21
		cbi(PORTC,6);
     9ee:	ae 98       	cbi	0x15, 6	; 21
		sbi(PORTC,7);
     9f0:	af 9a       	sbi	0x15, 7	; 21
	}
	
	//val_y = a;

	if(bit_is_set(PIND,3))
     9f2:	83 9b       	sbis	0x10, 3	; 16
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <y_pos+0x90>
	{
		prev_val5=1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	90 93 12 01 	sts	0x0112, r25
     9fe:	80 93 11 01 	sts	0x0111, r24
	}
	
	if(bit_is_set(PIND,2))
     a02:	82 9b       	sbis	0x10, 2	; 16
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <y_pos+0xa0>
	{
		prev_val4=1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 10 01 	sts	0x0110, r25
     a0e:	80 93 0f 01 	sts	0x010F, r24
	}

	sbi(PORTC,4);
     a12:	ac 9a       	sbi	0x15, 4	; 21
	cbi(PORTC,5);
     a14:	ad 98       	cbi	0x15, 5	; 21
	cbi(PORTC,7);
     a16:	af 98       	cbi	0x15, 7	; 21
	sbi(PORTC,6);
     a18:	ae 9a       	sbi	0x15, 6	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a1a:	8e ee       	ldi	r24, 0xEE	; 238
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	9b bd       	out	0x2b, r25	; 43
     a20:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a22:	82 ef       	ldi	r24, 0xF2	; 242
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	99 bd       	out	0x29, r25	; 41
     a28:	88 bd       	out	0x28, r24	; 40
	set_pwm1a(238);
	set_pwm1b(242);
	lcd_clear();
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	lcd_write_int_xy(7,0,val_y,3);
     a32:	40 91 05 01 	lds	r20, 0x0105
     a36:	50 91 06 01 	lds	r21, 0x0106
     a3a:	87 e0       	ldi	r24, 0x07	; 7
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	23 e0       	ldi	r18, 0x03	; 3
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>

	while(temp_pos_y==0)
	{
		if(bit_is_set(PIND,2))
		{
			curr_val4=1;
     a4a:	c1 e0       	ldi	r28, 0x01	; 1
     a4c:	d0 e0       	ldi	r29, 0x00	; 0
     a4e:	a2 c0       	rjmp	.+324    	; 0xb94 <y_pos+0x222>
	lcd_clear();
	lcd_write_int_xy(7,0,val_y,3);

	while(temp_pos_y==0)
	{
		if(bit_is_set(PIND,2))
     a50:	82 9b       	sbis	0x10, 2	; 16
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <y_pos+0xea>
		{
			curr_val4=1;
     a54:	d0 93 16 01 	sts	0x0116, r29
     a58:	c0 93 15 01 	sts	0x0115, r28
		}
		if(bit_is_set(PIND,3))
     a5c:	83 9b       	sbis	0x10, 3	; 16
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <y_pos+0xf6>
		{
			curr_val5=1;
     a60:	d0 93 18 01 	sts	0x0118, r29
     a64:	c0 93 17 01 	sts	0x0117, r28
		}
		
		if(bit_is_clear(PIND,2))
     a68:	82 99       	sbic	0x10, 2	; 16
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <y_pos+0x102>
		{
			curr_val4=0;
     a6c:	10 92 16 01 	sts	0x0116, r1
     a70:	10 92 15 01 	sts	0x0115, r1
		}
		if(bit_is_clear(PIND,3))
     a74:	83 99       	sbic	0x10, 3	; 16
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <y_pos+0x10e>
		{
			curr_val5=0;
     a78:	10 92 18 01 	sts	0x0118, r1
     a7c:	10 92 17 01 	sts	0x0117, r1
		}
		
		if(prev_val4!=curr_val4)
     a80:	20 91 0f 01 	lds	r18, 0x010F
     a84:	30 91 10 01 	lds	r19, 0x0110
     a88:	80 91 15 01 	lds	r24, 0x0115
     a8c:	90 91 16 01 	lds	r25, 0x0116
     a90:	28 17       	cp	r18, r24
     a92:	39 07       	cpc	r19, r25
     a94:	d1 f0       	breq	.+52     	; 0xaca <y_pos+0x158>
		{
			count4++;
     a96:	40 91 09 01 	lds	r20, 0x0109
     a9a:	50 91 0a 01 	lds	r21, 0x010A
     a9e:	4f 5f       	subi	r20, 0xFF	; 255
     aa0:	5f 4f       	sbci	r21, 0xFF	; 255
     aa2:	50 93 0a 01 	sts	0x010A, r21
     aa6:	40 93 09 01 	sts	0x0109, r20
			lcd_write_int_xy(1,0,count4,3);
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	23 e0       	ldi	r18, 0x03	; 3
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
			prev_val4 = curr_val4;
     aba:	80 91 15 01 	lds	r24, 0x0115
     abe:	90 91 16 01 	lds	r25, 0x0116
     ac2:	90 93 10 01 	sts	0x0110, r25
     ac6:	80 93 0f 01 	sts	0x010F, r24
		}
		if(prev_val5!=curr_val5)
     aca:	20 91 11 01 	lds	r18, 0x0111
     ace:	30 91 12 01 	lds	r19, 0x0112
     ad2:	80 91 17 01 	lds	r24, 0x0117
     ad6:	90 91 18 01 	lds	r25, 0x0118
     ada:	28 17       	cp	r18, r24
     adc:	39 07       	cpc	r19, r25
     ade:	d1 f0       	breq	.+52     	; 0xb14 <y_pos+0x1a2>
		{
			count5++;
     ae0:	40 91 0b 01 	lds	r20, 0x010B
     ae4:	50 91 0c 01 	lds	r21, 0x010C
     ae8:	4f 5f       	subi	r20, 0xFF	; 255
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	50 93 0c 01 	sts	0x010C, r21
     af0:	40 93 0b 01 	sts	0x010B, r20
			lcd_write_int_xy(12,0,count5,3);
     af4:	8c e0       	ldi	r24, 0x0C	; 12
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	23 e0       	ldi	r18, 0x03	; 3
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
			prev_val5 = curr_val5;
     b04:	80 91 17 01 	lds	r24, 0x0117
     b08:	90 91 18 01 	lds	r25, 0x0118
     b0c:	90 93 12 01 	sts	0x0112, r25
     b10:	80 93 11 01 	sts	0x0111, r24
		}
		
		if(count4==val_y)
     b14:	20 91 09 01 	lds	r18, 0x0109
     b18:	30 91 0a 01 	lds	r19, 0x010A
     b1c:	80 91 05 01 	lds	r24, 0x0105
     b20:	90 91 06 01 	lds	r25, 0x0106
     b24:	28 17       	cp	r18, r24
     b26:	39 07       	cpc	r19, r25
     b28:	51 f4       	brne	.+20     	; 0xb3e <y_pos+0x1cc>
		{
			sbi(PORTC,6);
     b2a:	ae 9a       	sbi	0x15, 6	; 21
			sbi(PORTC,7);
     b2c:	af 9a       	sbi	0x15, 7	; 21
			lcd_write_string_xy(11,1,"STOP");
     b2e:	8b e0       	ldi	r24, 0x0B	; 11
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	42 e7       	ldi	r20, 0x72	; 114
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
			//temp_pos_y = 1;
		}
		if(count5==val_y)
     b3e:	20 91 0b 01 	lds	r18, 0x010B
     b42:	30 91 0c 01 	lds	r19, 0x010C
     b46:	80 91 05 01 	lds	r24, 0x0105
     b4a:	90 91 06 01 	lds	r25, 0x0106
     b4e:	28 17       	cp	r18, r24
     b50:	39 07       	cpc	r19, r25
     b52:	51 f4       	brne	.+20     	; 0xb68 <y_pos+0x1f6>
		{
			sbi(PORTC,4);
     b54:	ac 9a       	sbi	0x15, 4	; 21
			sbi(PORTC,5);
     b56:	ad 9a       	sbi	0x15, 5	; 21
			lcd_write_string_xy(2,1,"STOP");
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	42 e7       	ldi	r20, 0x72	; 114
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
			//temp_pos_y = 1;
		}
		
		if(count4==val_y&&count5==val_y)
     b68:	20 91 09 01 	lds	r18, 0x0109
     b6c:	30 91 0a 01 	lds	r19, 0x010A
     b70:	80 91 05 01 	lds	r24, 0x0105
     b74:	90 91 06 01 	lds	r25, 0x0106
     b78:	28 17       	cp	r18, r24
     b7a:	39 07       	cpc	r19, r25
     b7c:	59 f4       	brne	.+22     	; 0xb94 <y_pos+0x222>
     b7e:	80 91 0b 01 	lds	r24, 0x010B
     b82:	90 91 0c 01 	lds	r25, 0x010C
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	21 f4       	brne	.+8      	; 0xb94 <y_pos+0x222>
		{
			temp_pos_y = 1;
     b8c:	d0 93 1e 01 	sts	0x011E, r29
     b90:	c0 93 1d 01 	sts	0x011D, r28
	set_pwm1a(238);
	set_pwm1b(242);
	lcd_clear();
	lcd_write_int_xy(7,0,val_y,3);

	while(temp_pos_y==0)
     b94:	80 91 1d 01 	lds	r24, 0x011D
     b98:	90 91 1e 01 	lds	r25, 0x011E
     b9c:	89 2b       	or	r24, r25
     b9e:	09 f4       	brne	.+2      	; 0xba2 <y_pos+0x230>
     ba0:	57 cf       	rjmp	.-338    	; 0xa50 <y_pos+0xde>
		if(count4==val_y&&count5==val_y)
		{
			temp_pos_y = 1;
		}
	}
	cbi(PORTC,4);
     ba2:	ac 98       	cbi	0x15, 4	; 21
	cbi(PORTC,5);
     ba4:	ad 98       	cbi	0x15, 5	; 21
	cbi(PORTC,6);
     ba6:	ae 98       	cbi	0x15, 6	; 21
	cbi(PORTC,7);
     ba8:	af 98       	cbi	0x15, 7	; 21
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <check>:

void check()
{
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17

if(temp_lcd1==0)
     bc0:	80 91 25 01 	lds	r24, 0x0125
     bc4:	90 91 26 01 	lds	r25, 0x0126
     bc8:	89 2b       	or	r24, r25
     bca:	71 f5       	brne	.+92     	; 0xc28 <check+0x78>
{
	lcd_clear();
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	lcd_write_string_xy(0,0,"ENTER INIT POS:");
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	47 e7       	ldi	r20, 0x77	; 119
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	lcd_write_string_xy(3,1,"X:");
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	47 e8       	ldi	r20, 0x87	; 135
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	lcd_write_string_xy(10,1,"Y:");
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	4a e8       	ldi	r20, 0x8A	; 138
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
     c04:	88 e8       	ldi	r24, 0x88	; 136
     c06:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c08:	20 e9       	ldi	r18, 0x90	; 144
     c0a:	31 e0       	ldi	r19, 0x01	; 1
     c0c:	f9 01       	movw	r30, r18
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <check+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c14:	d9 f7       	brne	.-10     	; 0xc0c <check+0x5c>
	_delay_ms(500);
	temp_lcd1++;
     c16:	80 91 25 01 	lds	r24, 0x0125
     c1a:	90 91 26 01 	lds	r25, 0x0126
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	90 93 26 01 	sts	0x0126, r25
     c24:	80 93 25 01 	sts	0x0125, r24
}

if(temp_lcd2!=0)
     c28:	80 91 27 01 	lds	r24, 0x0127
     c2c:	90 91 28 01 	lds	r25, 0x0128
     c30:	89 2b       	or	r24, r25
     c32:	91 f1       	breq	.+100    	; 0xc98 <check+0xe8>
{
	lcd_clear();
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
	lcd_write_string_xy(0,0,"ENTER FINAL POS:");
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	4d e8       	ldi	r20, 0x8D	; 141
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	lcd_write_string_xy(3,1,"X:");
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	47 e8       	ldi	r20, 0x87	; 135
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	lcd_write_string_xy(10,1,"Y:");
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	4a e8       	ldi	r20, 0x8A	; 138
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
     c6c:	88 e8       	ldi	r24, 0x88	; 136
     c6e:	93 e1       	ldi	r25, 0x13	; 19
     c70:	20 e9       	ldi	r18, 0x90	; 144
     c72:	31 e0       	ldi	r19, 0x01	; 1
     c74:	f9 01       	movw	r30, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <check+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	d9 f7       	brne	.-10     	; 0xc74 <check+0xc4>
	_delay_ms(500);
	temp_lcd2=0;
     c7e:	10 92 28 01 	sts	0x0128, r1
     c82:	10 92 27 01 	sts	0x0127, r1
	temp_xy2++;
     c86:	80 91 23 01 	lds	r24, 0x0123
     c8a:	90 91 24 01 	lds	r25, 0x0124
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	90 93 24 01 	sts	0x0124, r25
     c94:	80 93 23 01 	sts	0x0123, r24
}

if(bit_is_set(PINA,0)&&bit_is_set(PINA,4))
     c98:	c8 9b       	sbis	0x19, 0	; 25
     c9a:	20 c0       	rjmp	.+64     	; 0xcdc <check+0x12c>
     c9c:	cc 9b       	sbis	0x19, 4	; 25
     c9e:	1e c0       	rjmp	.+60     	; 0xcdc <check+0x12c>
{
	lcd_write_string_xy(5,1,"A");
     ca0:	85 e0       	ldi	r24, 0x05	; 5
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	4e e9       	ldi	r20, 0x9E	; 158
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=1;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e8       	ldi	r26, 0x80	; 128
     cb6:	bf e3       	ldi	r27, 0x3F	; 63
     cb8:	80 93 ed 00 	sts	0x00ED, r24
     cbc:	90 93 ee 00 	sts	0x00EE, r25
     cc0:	a0 93 ef 00 	sts	0x00EF, r26
     cc4:	b0 93 f0 00 	sts	0x00F0, r27
     cc8:	88 ee       	ldi	r24, 0xE8	; 232
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	20 e9       	ldi	r18, 0x90	; 144
     cce:	31 e0       	ldi	r19, 0x01	; 1
     cd0:	f9 01       	movw	r30, r18
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <check+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd8:	d9 f7       	brne	.-10     	; 0xcd0 <check+0x120>
     cda:	fd c1       	rjmp	.+1018   	; 0x10d6 <check+0x526>
	_delay_ms(100);
}

else if(bit_is_set(PINA,0)&&bit_is_set(PINA,5))
     cdc:	c8 9b       	sbis	0x19, 0	; 25
     cde:	20 c0       	rjmp	.+64     	; 0xd20 <check+0x170>
     ce0:	cd 9b       	sbis	0x19, 5	; 25
     ce2:	1e c0       	rjmp	.+60     	; 0xd20 <check+0x170>
{
	lcd_write_string_xy(5,1,"B");
     ce4:	85 e0       	ldi	r24, 0x05	; 5
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	40 ea       	ldi	r20, 0xA0	; 160
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=2;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e0       	ldi	r26, 0x00	; 0
     cfa:	b0 e4       	ldi	r27, 0x40	; 64
     cfc:	80 93 ed 00 	sts	0x00ED, r24
     d00:	90 93 ee 00 	sts	0x00EE, r25
     d04:	a0 93 ef 00 	sts	0x00EF, r26
     d08:	b0 93 f0 00 	sts	0x00F0, r27
     d0c:	88 ee       	ldi	r24, 0xE8	; 232
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	20 e9       	ldi	r18, 0x90	; 144
     d12:	31 e0       	ldi	r19, 0x01	; 1
     d14:	f9 01       	movw	r30, r18
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <check+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <check+0x164>
     d1e:	db c1       	rjmp	.+950    	; 0x10d6 <check+0x526>
	_delay_ms(100);
}

else if(bit_is_set(PINA,0)&&bit_is_set(PINA,6))
     d20:	c8 9b       	sbis	0x19, 0	; 25
     d22:	20 c0       	rjmp	.+64     	; 0xd64 <check+0x1b4>
     d24:	ce 9b       	sbis	0x19, 6	; 25
     d26:	1e c0       	rjmp	.+60     	; 0xd64 <check+0x1b4>
{
	lcd_write_string_xy(5,1,"C");
     d28:	85 e0       	ldi	r24, 0x05	; 5
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	42 ea       	ldi	r20, 0xA2	; 162
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=3;
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e4       	ldi	r26, 0x40	; 64
     d3e:	b0 e4       	ldi	r27, 0x40	; 64
     d40:	80 93 ed 00 	sts	0x00ED, r24
     d44:	90 93 ee 00 	sts	0x00EE, r25
     d48:	a0 93 ef 00 	sts	0x00EF, r26
     d4c:	b0 93 f0 00 	sts	0x00F0, r27
     d50:	88 ee       	ldi	r24, 0xE8	; 232
     d52:	93 e0       	ldi	r25, 0x03	; 3
     d54:	20 e9       	ldi	r18, 0x90	; 144
     d56:	31 e0       	ldi	r19, 0x01	; 1
     d58:	f9 01       	movw	r30, r18
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <check+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	d9 f7       	brne	.-10     	; 0xd58 <check+0x1a8>
     d62:	b9 c1       	rjmp	.+882    	; 0x10d6 <check+0x526>
	_delay_ms(100);
}

else if(bit_is_set(PINA,0)&&bit_is_set(PINA,7))
     d64:	c8 9b       	sbis	0x19, 0	; 25
     d66:	20 c0       	rjmp	.+64     	; 0xda8 <check+0x1f8>
     d68:	cf 9b       	sbis	0x19, 7	; 25
     d6a:	1e c0       	rjmp	.+60     	; 0xda8 <check+0x1f8>
{
	lcd_write_string_xy(5,1,"D");
     d6c:	85 e0       	ldi	r24, 0x05	; 5
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	44 ea       	ldi	r20, 0xA4	; 164
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=4;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	a0 e8       	ldi	r26, 0x80	; 128
     d82:	b0 e4       	ldi	r27, 0x40	; 64
     d84:	80 93 ed 00 	sts	0x00ED, r24
     d88:	90 93 ee 00 	sts	0x00EE, r25
     d8c:	a0 93 ef 00 	sts	0x00EF, r26
     d90:	b0 93 f0 00 	sts	0x00F0, r27
     d94:	88 ee       	ldi	r24, 0xE8	; 232
     d96:	93 e0       	ldi	r25, 0x03	; 3
     d98:	20 e9       	ldi	r18, 0x90	; 144
     d9a:	31 e0       	ldi	r19, 0x01	; 1
     d9c:	f9 01       	movw	r30, r18
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <check+0x1ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da4:	d9 f7       	brne	.-10     	; 0xd9c <check+0x1ec>
     da6:	97 c1       	rjmp	.+814    	; 0x10d6 <check+0x526>
	_delay_ms(100);
}


else if(bit_is_set(PINA,1)&&bit_is_set(PINA,4))
     da8:	c9 9b       	sbis	0x19, 1	; 25
     daa:	20 c0       	rjmp	.+64     	; 0xdec <check+0x23c>
     dac:	cc 9b       	sbis	0x19, 4	; 25
     dae:	1e c0       	rjmp	.+60     	; 0xdec <check+0x23c>
{
	lcd_write_string_xy(5,1,"E");
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	46 ea       	ldi	r20, 0xA6	; 166
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=5;
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 ea       	ldi	r26, 0xA0	; 160
     dc6:	b0 e4       	ldi	r27, 0x40	; 64
     dc8:	80 93 ed 00 	sts	0x00ED, r24
     dcc:	90 93 ee 00 	sts	0x00EE, r25
     dd0:	a0 93 ef 00 	sts	0x00EF, r26
     dd4:	b0 93 f0 00 	sts	0x00F0, r27
     dd8:	88 ee       	ldi	r24, 0xE8	; 232
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	20 e9       	ldi	r18, 0x90	; 144
     dde:	31 e0       	ldi	r19, 0x01	; 1
     de0:	f9 01       	movw	r30, r18
     de2:	31 97       	sbiw	r30, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <check+0x232>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de8:	d9 f7       	brne	.-10     	; 0xde0 <check+0x230>
     dea:	75 c1       	rjmp	.+746    	; 0x10d6 <check+0x526>
	_delay_ms(100);
}

else if(bit_is_set(PINA,1)&&bit_is_set(PINA,5))
     dec:	c9 9b       	sbis	0x19, 1	; 25
     dee:	20 c0       	rjmp	.+64     	; 0xe30 <check+0x280>
     df0:	cd 9b       	sbis	0x19, 5	; 25
     df2:	1e c0       	rjmp	.+60     	; 0xe30 <check+0x280>
{
	lcd_write_string_xy(5,1,"F");
     df4:	85 e0       	ldi	r24, 0x05	; 5
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	48 ea       	ldi	r20, 0xA8	; 168
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=6;
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	a0 ec       	ldi	r26, 0xC0	; 192
     e0a:	b0 e4       	ldi	r27, 0x40	; 64
     e0c:	80 93 ed 00 	sts	0x00ED, r24
     e10:	90 93 ee 00 	sts	0x00EE, r25
     e14:	a0 93 ef 00 	sts	0x00EF, r26
     e18:	b0 93 f0 00 	sts	0x00F0, r27
     e1c:	88 ee       	ldi	r24, 0xE8	; 232
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	20 e9       	ldi	r18, 0x90	; 144
     e22:	31 e0       	ldi	r19, 0x01	; 1
     e24:	f9 01       	movw	r30, r18
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <check+0x276>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2c:	d9 f7       	brne	.-10     	; 0xe24 <check+0x274>
     e2e:	53 c1       	rjmp	.+678    	; 0x10d6 <check+0x526>
	_delay_ms(100);
}

else if(bit_is_set(PINA,1)&&bit_is_set(PINA,6))
     e30:	c9 9b       	sbis	0x19, 1	; 25
     e32:	20 c0       	rjmp	.+64     	; 0xe74 <check+0x2c4>
     e34:	ce 9b       	sbis	0x19, 6	; 25
     e36:	1e c0       	rjmp	.+60     	; 0xe74 <check+0x2c4>
{
	lcd_write_string_xy(5,1,"G");
     e38:	85 e0       	ldi	r24, 0x05	; 5
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	4a ea       	ldi	r20, 0xAA	; 170
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=7;
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a0 ee       	ldi	r26, 0xE0	; 224
     e4e:	b0 e4       	ldi	r27, 0x40	; 64
     e50:	80 93 ed 00 	sts	0x00ED, r24
     e54:	90 93 ee 00 	sts	0x00EE, r25
     e58:	a0 93 ef 00 	sts	0x00EF, r26
     e5c:	b0 93 f0 00 	sts	0x00F0, r27
     e60:	88 ee       	ldi	r24, 0xE8	; 232
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	20 e9       	ldi	r18, 0x90	; 144
     e66:	31 e0       	ldi	r19, 0x01	; 1
     e68:	f9 01       	movw	r30, r18
     e6a:	31 97       	sbiw	r30, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <check+0x2ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e70:	d9 f7       	brne	.-10     	; 0xe68 <check+0x2b8>
     e72:	31 c1       	rjmp	.+610    	; 0x10d6 <check+0x526>
	_delay_ms(100);
}

else if(bit_is_set(PINA,1)&&bit_is_set(PINA,7))
     e74:	c9 9b       	sbis	0x19, 1	; 25
     e76:	20 c0       	rjmp	.+64     	; 0xeb8 <check+0x308>
     e78:	cf 9b       	sbis	0x19, 7	; 25
     e7a:	1e c0       	rjmp	.+60     	; 0xeb8 <check+0x308>
{
	lcd_write_string_xy(5,1,"H");
     e7c:	85 e0       	ldi	r24, 0x05	; 5
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	4c ea       	ldi	r20, 0xAC	; 172
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	x=8;
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	b1 e4       	ldi	r27, 0x41	; 65
     e94:	80 93 ed 00 	sts	0x00ED, r24
     e98:	90 93 ee 00 	sts	0x00EE, r25
     e9c:	a0 93 ef 00 	sts	0x00EF, r26
     ea0:	b0 93 f0 00 	sts	0x00F0, r27
     ea4:	88 ee       	ldi	r24, 0xE8	; 232
     ea6:	93 e0       	ldi	r25, 0x03	; 3
     ea8:	20 e9       	ldi	r18, 0x90	; 144
     eaa:	31 e0       	ldi	r19, 0x01	; 1
     eac:	f9 01       	movw	r30, r18
     eae:	31 97       	sbiw	r30, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <check+0x2fe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb4:	d9 f7       	brne	.-10     	; 0xeac <check+0x2fc>
     eb6:	0f c1       	rjmp	.+542    	; 0x10d6 <check+0x526>
	_delay_ms(100);
}

else if(bit_is_set(PINA,2)&&bit_is_set(PINA,4))
     eb8:	ca 9b       	sbis	0x19, 2	; 25
     eba:	20 c0       	rjmp	.+64     	; 0xefc <check+0x34c>
     ebc:	cc 9b       	sbis	0x19, 4	; 25
     ebe:	1e c0       	rjmp	.+60     	; 0xefc <check+0x34c>
{
	lcd_write_string_xy(12,1,"1");
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	4e ea       	ldi	r20, 0xAE	; 174
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=1;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a0 e8       	ldi	r26, 0x80	; 128
     ed6:	bf e3       	ldi	r27, 0x3F	; 63
     ed8:	80 93 f1 00 	sts	0x00F1, r24
     edc:	90 93 f2 00 	sts	0x00F2, r25
     ee0:	a0 93 f3 00 	sts	0x00F3, r26
     ee4:	b0 93 f4 00 	sts	0x00F4, r27
     ee8:	80 e1       	ldi	r24, 0x10	; 16
     eea:	97 e2       	ldi	r25, 0x27	; 39
     eec:	20 e9       	ldi	r18, 0x90	; 144
     eee:	31 e0       	ldi	r19, 0x01	; 1
     ef0:	f9 01       	movw	r30, r18
     ef2:	31 97       	sbiw	r30, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <check+0x342>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	d9 f7       	brne	.-10     	; 0xef0 <check+0x340>
     efa:	ed c0       	rjmp	.+474    	; 0x10d6 <check+0x526>
	_delay_ms(1000);
}

else if(bit_is_set(PINA,2)&&bit_is_set(PINA,5))
     efc:	ca 9b       	sbis	0x19, 2	; 25
     efe:	20 c0       	rjmp	.+64     	; 0xf40 <check+0x390>
     f00:	cd 9b       	sbis	0x19, 5	; 25
     f02:	1e c0       	rjmp	.+60     	; 0xf40 <check+0x390>
{
	lcd_write_string_xy(12,1,"2");
     f04:	8c e0       	ldi	r24, 0x0C	; 12
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	40 eb       	ldi	r20, 0xB0	; 176
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=2;
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a0 e0       	ldi	r26, 0x00	; 0
     f1a:	b0 e4       	ldi	r27, 0x40	; 64
     f1c:	80 93 f1 00 	sts	0x00F1, r24
     f20:	90 93 f2 00 	sts	0x00F2, r25
     f24:	a0 93 f3 00 	sts	0x00F3, r26
     f28:	b0 93 f4 00 	sts	0x00F4, r27
     f2c:	80 e1       	ldi	r24, 0x10	; 16
     f2e:	97 e2       	ldi	r25, 0x27	; 39
     f30:	20 e9       	ldi	r18, 0x90	; 144
     f32:	31 e0       	ldi	r19, 0x01	; 1
     f34:	f9 01       	movw	r30, r18
     f36:	31 97       	sbiw	r30, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <check+0x386>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3c:	d9 f7       	brne	.-10     	; 0xf34 <check+0x384>
     f3e:	cb c0       	rjmp	.+406    	; 0x10d6 <check+0x526>
	_delay_ms(1000);
}

else if(bit_is_set(PINA,2)&&bit_is_set(PINA,6))
     f40:	ca 9b       	sbis	0x19, 2	; 25
     f42:	20 c0       	rjmp	.+64     	; 0xf84 <check+0x3d4>
     f44:	ce 9b       	sbis	0x19, 6	; 25
     f46:	1e c0       	rjmp	.+60     	; 0xf84 <check+0x3d4>
{
	lcd_write_string_xy(12,1,"3");
     f48:	8c e0       	ldi	r24, 0x0C	; 12
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	42 eb       	ldi	r20, 0xB2	; 178
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=3;
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e4       	ldi	r26, 0x40	; 64
     f5e:	b0 e4       	ldi	r27, 0x40	; 64
     f60:	80 93 f1 00 	sts	0x00F1, r24
     f64:	90 93 f2 00 	sts	0x00F2, r25
     f68:	a0 93 f3 00 	sts	0x00F3, r26
     f6c:	b0 93 f4 00 	sts	0x00F4, r27
     f70:	80 e1       	ldi	r24, 0x10	; 16
     f72:	97 e2       	ldi	r25, 0x27	; 39
     f74:	20 e9       	ldi	r18, 0x90	; 144
     f76:	31 e0       	ldi	r19, 0x01	; 1
     f78:	f9 01       	movw	r30, r18
     f7a:	31 97       	sbiw	r30, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <check+0x3ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	d9 f7       	brne	.-10     	; 0xf78 <check+0x3c8>
     f82:	a9 c0       	rjmp	.+338    	; 0x10d6 <check+0x526>
	_delay_ms(1000);
}

else if(bit_is_set(PINA,2)&&bit_is_set(PINA,7))
     f84:	ca 9b       	sbis	0x19, 2	; 25
     f86:	20 c0       	rjmp	.+64     	; 0xfc8 <check+0x418>
     f88:	cf 9b       	sbis	0x19, 7	; 25
     f8a:	1e c0       	rjmp	.+60     	; 0xfc8 <check+0x418>
{
	lcd_write_string_xy(12,1,"4");
     f8c:	8c e0       	ldi	r24, 0x0C	; 12
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	44 eb       	ldi	r20, 0xB4	; 180
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=4;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e8       	ldi	r26, 0x80	; 128
     fa2:	b0 e4       	ldi	r27, 0x40	; 64
     fa4:	80 93 f1 00 	sts	0x00F1, r24
     fa8:	90 93 f2 00 	sts	0x00F2, r25
     fac:	a0 93 f3 00 	sts	0x00F3, r26
     fb0:	b0 93 f4 00 	sts	0x00F4, r27
     fb4:	80 e1       	ldi	r24, 0x10	; 16
     fb6:	97 e2       	ldi	r25, 0x27	; 39
     fb8:	20 e9       	ldi	r18, 0x90	; 144
     fba:	31 e0       	ldi	r19, 0x01	; 1
     fbc:	f9 01       	movw	r30, r18
     fbe:	31 97       	sbiw	r30, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <check+0x40e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc4:	d9 f7       	brne	.-10     	; 0xfbc <check+0x40c>
     fc6:	87 c0       	rjmp	.+270    	; 0x10d6 <check+0x526>
	_delay_ms(1000);
}

else if(bit_is_set(PINA,3)&&bit_is_set(PINA,4))
     fc8:	cb 9b       	sbis	0x19, 3	; 25
     fca:	20 c0       	rjmp	.+64     	; 0x100c <check+0x45c>
     fcc:	cc 9b       	sbis	0x19, 4	; 25
     fce:	1e c0       	rjmp	.+60     	; 0x100c <check+0x45c>
{
	lcd_write_string_xy(12,1,"5");
     fd0:	8c e0       	ldi	r24, 0x0C	; 12
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	46 eb       	ldi	r20, 0xB6	; 182
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=5;
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 ea       	ldi	r26, 0xA0	; 160
     fe6:	b0 e4       	ldi	r27, 0x40	; 64
     fe8:	80 93 f1 00 	sts	0x00F1, r24
     fec:	90 93 f2 00 	sts	0x00F2, r25
     ff0:	a0 93 f3 00 	sts	0x00F3, r26
     ff4:	b0 93 f4 00 	sts	0x00F4, r27
     ff8:	80 e1       	ldi	r24, 0x10	; 16
     ffa:	97 e2       	ldi	r25, 0x27	; 39
     ffc:	20 e9       	ldi	r18, 0x90	; 144
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	f9 01       	movw	r30, r18
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <check+0x452>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1006:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	d9 f7       	brne	.-10     	; 0x1000 <check+0x450>
    100a:	65 c0       	rjmp	.+202    	; 0x10d6 <check+0x526>
	_delay_ms(1000);
}

else if(bit_is_set(PINA,3)&&bit_is_set(PINA,5))
    100c:	cb 9b       	sbis	0x19, 3	; 25
    100e:	20 c0       	rjmp	.+64     	; 0x1050 <check+0x4a0>
    1010:	cd 9b       	sbis	0x19, 5	; 25
    1012:	1e c0       	rjmp	.+60     	; 0x1050 <check+0x4a0>
{
	lcd_write_string_xy(12,1,"6");
    1014:	8c e0       	ldi	r24, 0x0C	; 12
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	48 eb       	ldi	r20, 0xB8	; 184
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=6;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 ec       	ldi	r26, 0xC0	; 192
    102a:	b0 e4       	ldi	r27, 0x40	; 64
    102c:	80 93 f1 00 	sts	0x00F1, r24
    1030:	90 93 f2 00 	sts	0x00F2, r25
    1034:	a0 93 f3 00 	sts	0x00F3, r26
    1038:	b0 93 f4 00 	sts	0x00F4, r27
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	97 e2       	ldi	r25, 0x27	; 39
    1040:	20 e9       	ldi	r18, 0x90	; 144
    1042:	31 e0       	ldi	r19, 0x01	; 1
    1044:	f9 01       	movw	r30, r18
    1046:	31 97       	sbiw	r30, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <check+0x496>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	d9 f7       	brne	.-10     	; 0x1044 <check+0x494>
    104e:	43 c0       	rjmp	.+134    	; 0x10d6 <check+0x526>
	_delay_ms(1000);
}

else if(bit_is_set(PINA,3)&&bit_is_set(PINA,6))
    1050:	cb 9b       	sbis	0x19, 3	; 25
    1052:	20 c0       	rjmp	.+64     	; 0x1094 <check+0x4e4>
    1054:	ce 9b       	sbis	0x19, 6	; 25
    1056:	1e c0       	rjmp	.+60     	; 0x1094 <check+0x4e4>
{
	lcd_write_string_xy(12,1,"7");
    1058:	8c e0       	ldi	r24, 0x0C	; 12
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	4a eb       	ldi	r20, 0xBA	; 186
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=7;
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 ee       	ldi	r26, 0xE0	; 224
    106e:	b0 e4       	ldi	r27, 0x40	; 64
    1070:	80 93 f1 00 	sts	0x00F1, r24
    1074:	90 93 f2 00 	sts	0x00F2, r25
    1078:	a0 93 f3 00 	sts	0x00F3, r26
    107c:	b0 93 f4 00 	sts	0x00F4, r27
    1080:	80 e1       	ldi	r24, 0x10	; 16
    1082:	97 e2       	ldi	r25, 0x27	; 39
    1084:	20 e9       	ldi	r18, 0x90	; 144
    1086:	31 e0       	ldi	r19, 0x01	; 1
    1088:	f9 01       	movw	r30, r18
    108a:	31 97       	sbiw	r30, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <check+0x4da>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1090:	d9 f7       	brne	.-10     	; 0x1088 <check+0x4d8>
    1092:	21 c0       	rjmp	.+66     	; 0x10d6 <check+0x526>
	_delay_ms(1000);
}

else if(bit_is_set(PINA,3)&&bit_is_set(PINA,7))
    1094:	cb 9b       	sbis	0x19, 3	; 25
    1096:	1f c0       	rjmp	.+62     	; 0x10d6 <check+0x526>
    1098:	cf 9b       	sbis	0x19, 7	; 25
    109a:	1d c0       	rjmp	.+58     	; 0x10d6 <check+0x526>
{
	lcd_write_string_xy(12,1,"8");
    109c:	8c e0       	ldi	r24, 0x0C	; 12
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	4c eb       	ldi	r20, 0xBC	; 188
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
	y=8;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b1 e4       	ldi	r27, 0x41	; 65
    10b4:	80 93 f1 00 	sts	0x00F1, r24
    10b8:	90 93 f2 00 	sts	0x00F2, r25
    10bc:	a0 93 f3 00 	sts	0x00F3, r26
    10c0:	b0 93 f4 00 	sts	0x00F4, r27
    10c4:	80 e1       	ldi	r24, 0x10	; 16
    10c6:	97 e2       	ldi	r25, 0x27	; 39
    10c8:	20 e9       	ldi	r18, 0x90	; 144
    10ca:	31 e0       	ldi	r19, 0x01	; 1
    10cc:	f9 01       	movw	r30, r18
    10ce:	31 97       	sbiw	r30, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <check+0x51e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <check+0x51c>
	_delay_ms(1000);
}
	
if(x!=0&&y!=0)
    10d6:	a0 90 ed 00 	lds	r10, 0x00ED
    10da:	b0 90 ee 00 	lds	r11, 0x00EE
    10de:	c0 90 ef 00 	lds	r12, 0x00EF
    10e2:	d0 90 f0 00 	lds	r13, 0x00F0
    10e6:	c6 01       	movw	r24, r12
    10e8:	b5 01       	movw	r22, r10
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__cmpsf2>
    10f6:	88 23       	and	r24, r24
    10f8:	09 f4       	brne	.+2      	; 0x10fc <check+0x54c>
    10fa:	82 c0       	rjmp	.+260    	; 0x1200 <check+0x650>
    10fc:	e0 90 f1 00 	lds	r14, 0x00F1
    1100:	f0 90 f2 00 	lds	r15, 0x00F2
    1104:	00 91 f3 00 	lds	r16, 0x00F3
    1108:	10 91 f4 00 	lds	r17, 0x00F4
    110c:	c8 01       	movw	r24, r16
    110e:	b7 01       	movw	r22, r14
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__cmpsf2>
    111c:	88 23       	and	r24, r24
    111e:	09 f4       	brne	.+2      	; 0x1122 <check+0x572>
    1120:	6f c0       	rjmp	.+222    	; 0x1200 <check+0x650>
{
	if(temp_xy1==0)
    1122:	80 91 21 01 	lds	r24, 0x0121
    1126:	90 91 22 01 	lds	r25, 0x0122
    112a:	89 2b       	or	r24, r25
    112c:	99 f5       	brne	.+102    	; 0x1194 <check+0x5e4>
	{
		x1=x;y1=y;
    112e:	a0 92 f5 00 	sts	0x00F5, r10
    1132:	b0 92 f6 00 	sts	0x00F6, r11
    1136:	c0 92 f7 00 	sts	0x00F7, r12
    113a:	d0 92 f8 00 	sts	0x00F8, r13
    113e:	e0 92 fd 00 	sts	0x00FD, r14
    1142:	f0 92 fe 00 	sts	0x00FE, r15
    1146:	00 93 ff 00 	sts	0x00FF, r16
    114a:	10 93 00 01 	sts	0x0100, r17
		temp_xy1++;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 22 01 	sts	0x0122, r25
    1156:	80 93 21 01 	sts	0x0121, r24
		temp_lcd2++;
    115a:	80 91 27 01 	lds	r24, 0x0127
    115e:	90 91 28 01 	lds	r25, 0x0128
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	90 93 28 01 	sts	0x0128, r25
    1168:	80 93 27 01 	sts	0x0127, r24
		x=0;y=0;
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	80 93 ed 00 	sts	0x00ED, r24
    1178:	90 93 ee 00 	sts	0x00EE, r25
    117c:	a0 93 ef 00 	sts	0x00EF, r26
    1180:	b0 93 f0 00 	sts	0x00F0, r27
    1184:	80 93 f1 00 	sts	0x00F1, r24
    1188:	90 93 f2 00 	sts	0x00F2, r25
    118c:	a0 93 f3 00 	sts	0x00F3, r26
    1190:	b0 93 f4 00 	sts	0x00F4, r27
	}

	if(temp_xy2!=0)
    1194:	20 91 23 01 	lds	r18, 0x0123
    1198:	30 91 24 01 	lds	r19, 0x0124
    119c:	21 15       	cp	r18, r1
    119e:	31 05       	cpc	r19, r1
    11a0:	79 f1       	breq	.+94     	; 0x1200 <check+0x650>
	{
		x2=x;y2=y;
    11a2:	80 91 ed 00 	lds	r24, 0x00ED
    11a6:	90 91 ee 00 	lds	r25, 0x00EE
    11aa:	a0 91 ef 00 	lds	r26, 0x00EF
    11ae:	b0 91 f0 00 	lds	r27, 0x00F0
    11b2:	80 93 f9 00 	sts	0x00F9, r24
    11b6:	90 93 fa 00 	sts	0x00FA, r25
    11ba:	a0 93 fb 00 	sts	0x00FB, r26
    11be:	b0 93 fc 00 	sts	0x00FC, r27
    11c2:	80 91 f1 00 	lds	r24, 0x00F1
    11c6:	90 91 f2 00 	lds	r25, 0x00F2
    11ca:	a0 91 f3 00 	lds	r26, 0x00F3
    11ce:	b0 91 f4 00 	lds	r27, 0x00F4
    11d2:	80 93 01 01 	sts	0x0101, r24
    11d6:	90 93 02 01 	sts	0x0102, r25
    11da:	a0 93 03 01 	sts	0x0103, r26
    11de:	b0 93 04 01 	sts	0x0104, r27
		temp_xy2++;
    11e2:	2f 5f       	subi	r18, 0xFF	; 255
    11e4:	3f 4f       	sbci	r19, 0xFF	; 255
    11e6:	30 93 24 01 	sts	0x0124, r19
    11ea:	20 93 23 01 	sts	0x0123, r18
		temp_keys++;
    11ee:	80 91 1f 01 	lds	r24, 0x011F
    11f2:	90 91 20 01 	lds	r25, 0x0120
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	90 93 20 01 	sts	0x0120, r25
    11fc:	80 93 1f 01 	sts	0x011F, r24
	}
}

}
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	08 95       	ret

00001212 <main>:

void main()
{
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
{
/*PWM2_DIR=1;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;*/
TCCR2=0x69;
    121a:	89 e6       	ldi	r24, 0x69	; 105
    121c:	85 bd       	out	0x25, r24	; 37

pwm2_init();
pwm1_init();
    121e:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>

lcd_init(underline);
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	0e 94 31 02 	call	0x462	; 0x462 <lcd_init>
lcd_clear();
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>

DDRD=0b10110000;
    1230:	80 eb       	ldi	r24, 0xB0	; 176
    1232:	81 bb       	out	0x11, r24	; 17
PORTD=0xFF;
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	82 bb       	out	0x12, r24	; 18

DDRC=0xFF;
    1238:	84 bb       	out	0x14, r24	; 20
PORTC=0xFF;
    123a:	85 bb       	out	0x15, r24	; 21

DDRB=0xFF;
    123c:	87 bb       	out	0x17, r24	; 23

DDRA=0xF0;
    123e:	80 ef       	ldi	r24, 0xF0	; 240
    1240:	8a bb       	out	0x1a, r24	; 26

lcd_write_string_xy(4,0,"Press A");
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	4e eb       	ldi	r20, 0xBE	; 190
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
lcd_write_string_xy(4,1,"TO START");
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	46 ec       	ldi	r20, 0xC6	; 198
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
sbi(PORTA,4);
    1262:	dc 9a       	sbi	0x1b, 4	; 27

while(bit_is_clear(PINA,0)&&bit_is_set(PINA,4))
    1264:	c8 99       	sbic	0x19, 0	; 25
    1266:	1b c0       	rjmp	.+54     	; 0x129e <main+0x8c>
    1268:	cc 99       	sbic	0x19, 4	; 25
    126a:	fc cf       	rjmp	.-8      	; 0x1264 <main+0x52>
    126c:	18 c0       	rjmp	.+48     	; 0x129e <main+0x8c>
{
}

while(temp_keys==0)
{
	cbi(PORTA,4);cbi(PORTA,5);cbi(PORTA,6);sbi(PORTA,7);
    126e:	dc 98       	cbi	0x1b, 4	; 27
    1270:	dd 98       	cbi	0x1b, 5	; 27
    1272:	de 98       	cbi	0x1b, 6	; 27
    1274:	df 9a       	sbi	0x1b, 7	; 27
	check();
    1276:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <check>
	cbi(PORTA,4);cbi(PORTA,5);sbi(PORTA,6);cbi(PORTA,7);
    127a:	dc 98       	cbi	0x1b, 4	; 27
    127c:	dd 98       	cbi	0x1b, 5	; 27
    127e:	de 9a       	sbi	0x1b, 6	; 27
    1280:	df 98       	cbi	0x1b, 7	; 27
	check();
    1282:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <check>
	cbi(PORTA,4);sbi(PORTA,5);cbi(PORTA,6);cbi(PORTA,7);
    1286:	dc 98       	cbi	0x1b, 4	; 27
    1288:	dd 9a       	sbi	0x1b, 5	; 27
    128a:	de 98       	cbi	0x1b, 6	; 27
    128c:	df 98       	cbi	0x1b, 7	; 27
	check();
    128e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <check>
	sbi(PORTA,4);cbi(PORTA,5);cbi(PORTA,6);cbi(PORTA,7);
    1292:	dc 9a       	sbi	0x1b, 4	; 27
    1294:	dd 98       	cbi	0x1b, 5	; 27
    1296:	de 98       	cbi	0x1b, 6	; 27
    1298:	df 98       	cbi	0x1b, 7	; 27
	check();
    129a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <check>

while(bit_is_clear(PINA,0)&&bit_is_set(PINA,4))
{
}

while(temp_keys==0)
    129e:	80 91 1f 01 	lds	r24, 0x011F
    12a2:	90 91 20 01 	lds	r25, 0x0120
    12a6:	89 2b       	or	r24, r25
    12a8:	11 f3       	breq	.-60     	; 0x126e <main+0x5c>
	check();
	sbi(PORTA,4);cbi(PORTA,5);cbi(PORTA,6);cbi(PORTA,7);
	check();
}

lcd_clear();
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
lcd_write_string_xy(1,0,"X1");lcd_write_string_xy(5,0,"Y1");
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	4f ec       	ldi	r20, 0xCF	; 207
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
    12c2:	85 e0       	ldi	r24, 0x05	; 5
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	42 ed       	ldi	r20, 0xD2	; 210
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
lcd_write_string_xy(10,0,"X2");lcd_write_string_xy(13,0,"Y2");
    12d2:	8a e0       	ldi	r24, 0x0A	; 10
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	45 ed       	ldi	r20, 0xD5	; 213
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
    12e2:	8d e0       	ldi	r24, 0x0D	; 13
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	48 ed       	ldi	r20, 0xD8	; 216
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>
lcd_write_int_xy(1,1,x1,1);lcd_write_int_xy(5,1,y1,1);
    12f2:	60 91 f5 00 	lds	r22, 0x00F5
    12f6:	70 91 f6 00 	lds	r23, 0x00F6
    12fa:	80 91 f7 00 	lds	r24, 0x00F7
    12fe:	90 91 f8 00 	lds	r25, 0x00F8
    1302:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	a9 01       	movw	r20, r18
    1314:	21 e0       	ldi	r18, 0x01	; 1
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
    131c:	60 91 fd 00 	lds	r22, 0x00FD
    1320:	70 91 fe 00 	lds	r23, 0x00FE
    1324:	80 91 ff 00 	lds	r24, 0x00FF
    1328:	90 91 00 01 	lds	r25, 0x0100
    132c:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    1330:	9b 01       	movw	r18, r22
    1332:	ac 01       	movw	r20, r24
    1334:	85 e0       	ldi	r24, 0x05	; 5
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
lcd_write_int_xy(10,1,x2,1);lcd_write_int_xy(13,1,y2,1);
    1346:	60 91 f9 00 	lds	r22, 0x00F9
    134a:	70 91 fa 00 	lds	r23, 0x00FA
    134e:	80 91 fb 00 	lds	r24, 0x00FB
    1352:	90 91 fc 00 	lds	r25, 0x00FC
    1356:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	8a e0       	ldi	r24, 0x0A	; 10
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
    1370:	60 91 01 01 	lds	r22, 0x0101
    1374:	70 91 02 01 	lds	r23, 0x0102
    1378:	80 91 03 01 	lds	r24, 0x0103
    137c:	90 91 04 01 	lds	r25, 0x0104
    1380:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	8d e0       	ldi	r24, 0x0D	; 13
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	a9 01       	movw	r20, r18
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_write_int_xy>
    139a:	80 e1       	ldi	r24, 0x10	; 16
    139c:	97 e2       	ldi	r25, 0x27	; 39
    139e:	20 e9       	ldi	r18, 0x90	; 144
    13a0:	31 e0       	ldi	r19, 0x01	; 1
    13a2:	f9 01       	movw	r30, r18
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <main+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	d9 f7       	brne	.-10     	; 0x13a2 <main+0x190>
_delay_ms(1000);

x_dir=(x1-x0)*16;
    13ac:	60 91 f5 00 	lds	r22, 0x00F5
    13b0:	70 91 f6 00 	lds	r23, 0x00F6
    13b4:	80 91 f7 00 	lds	r24, 0x00F7
    13b8:	90 91 f8 00 	lds	r25, 0x00F8
    13bc:	20 91 df 00 	lds	r18, 0x00DF
    13c0:	30 91 e0 00 	lds	r19, 0x00E0
    13c4:	40 91 e1 00 	lds	r20, 0x00E1
    13c8:	50 91 e2 00 	lds	r21, 0x00E2
    13cc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
    13dc:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    13e0:	7b 01       	movw	r14, r22
    13e2:	8c 01       	movw	r16, r24
    13e4:	70 93 ea 00 	sts	0x00EA, r23
    13e8:	60 93 e9 00 	sts	0x00E9, r22
y_dir=(y1-y0)*16;
    13ec:	60 91 fd 00 	lds	r22, 0x00FD
    13f0:	70 91 fe 00 	lds	r23, 0x00FE
    13f4:	80 91 ff 00 	lds	r24, 0x00FF
    13f8:	90 91 00 01 	lds	r25, 0x0100
    13fc:	20 91 e3 00 	lds	r18, 0x00E3
    1400:	30 91 e4 00 	lds	r19, 0x00E4
    1404:	40 91 e5 00 	lds	r20, 0x00E5
    1408:	50 91 e6 00 	lds	r21, 0x00E6
    140c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
    141c:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    1420:	70 93 ec 00 	sts	0x00EC, r23
    1424:	60 93 eb 00 	sts	0x00EB, r22
	
x_pos(x_dir);
    1428:	c7 01       	movw	r24, r14
    142a:	0e 94 1e 04 	call	0x83c	; 0x83c <x_pos>
    142e:	88 e8       	ldi	r24, 0x88	; 136
    1430:	93 e1       	ldi	r25, 0x13	; 19
    1432:	20 e9       	ldi	r18, 0x90	; 144
    1434:	31 e0       	ldi	r19, 0x01	; 1
    1436:	f9 01       	movw	r30, r18
    1438:	31 97       	sbiw	r30, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <main+0x226>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143e:	d9 f7       	brne	.-10     	; 0x1436 <main+0x224>
_delay_ms(500);
y_pos(y_dir);
    1440:	80 91 eb 00 	lds	r24, 0x00EB
    1444:	90 91 ec 00 	lds	r25, 0x00EC
    1448:	0e 94 b9 04 	call	0x972	; 0x972 <y_pos>
    144c:	88 e8       	ldi	r24, 0x88	; 136
    144e:	93 e1       	ldi	r25, 0x13	; 19
    1450:	20 e9       	ldi	r18, 0x90	; 144
    1452:	31 e0       	ldi	r19, 0x01	; 1
    1454:	f9 01       	movw	r30, r18
    1456:	31 97       	sbiw	r30, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <main+0x244>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	d9 f7       	brne	.-10     	; 0x1454 <main+0x242>
_delay_ms(500);
magnet_up();
    145e:	0e 94 88 03 	call	0x710	; 0x710 <magnet_up>

x_dir=(x2-x1)*16;
    1462:	60 91 f9 00 	lds	r22, 0x00F9
    1466:	70 91 fa 00 	lds	r23, 0x00FA
    146a:	80 91 fb 00 	lds	r24, 0x00FB
    146e:	90 91 fc 00 	lds	r25, 0x00FC
    1472:	20 91 f5 00 	lds	r18, 0x00F5
    1476:	30 91 f6 00 	lds	r19, 0x00F6
    147a:	40 91 f7 00 	lds	r20, 0x00F7
    147e:	50 91 f8 00 	lds	r21, 0x00F8
    1482:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e8       	ldi	r20, 0x80	; 128
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
    1492:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    1496:	70 93 ea 00 	sts	0x00EA, r23
    149a:	60 93 e9 00 	sts	0x00E9, r22
y_dir=(y2-y1)*16;
    149e:	60 91 01 01 	lds	r22, 0x0101
    14a2:	70 91 02 01 	lds	r23, 0x0102
    14a6:	80 91 03 01 	lds	r24, 0x0103
    14aa:	90 91 04 01 	lds	r25, 0x0104
    14ae:	20 91 fd 00 	lds	r18, 0x00FD
    14b2:	30 91 fe 00 	lds	r19, 0x00FE
    14b6:	40 91 ff 00 	lds	r20, 0x00FF
    14ba:	50 91 00 01 	lds	r21, 0x0100
    14be:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
    14ce:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixsfsi>
    14d2:	70 93 ec 00 	sts	0x00EC, r23
    14d6:	60 93 eb 00 	sts	0x00EB, r22

lcd_clear();
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	0e 94 09 02 	call	0x412	; 0x412 <lcd_byte>
lcd_write_string_xy(6,0,"END");
    14e2:	86 e0       	ldi	r24, 0x06	; 6
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	4b ed       	ldi	r20, 0xDB	; 219
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	0e 94 d6 02 	call	0x5ac	; 0x5ac <lcd_write_string_xy>

    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	08 95       	ret

000014fc <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eerd_byte_m16>
    1504:	80 93 2f 01 	sts	0x012F, r24
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eerd_byte_m16>
    1510:	80 93 30 01 	sts	0x0130, r24
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eerd_byte_m16>
    151c:	80 93 31 01 	sts	0x0131, r24
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eerd_byte_m16>
    1528:	80 93 32 01 	sts	0x0132, r24
		eeprom_addr++;
	}
}
    152c:	08 95       	ret

0000152e <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    1532:	20 91 33 01 	lds	r18, 0x0133
    1536:	80 91 2b 01 	lds	r24, 0x012B
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	82 0f       	add	r24, r18
    153e:	91 1d       	adc	r25, r1
    1540:	95 95       	asr	r25
    1542:	87 95       	ror	r24
    1544:	80 93 2f 01 	sts	0x012F, r24
    1548:	20 91 34 01 	lds	r18, 0x0134
    154c:	80 91 2c 01 	lds	r24, 0x012C
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	82 0f       	add	r24, r18
    1554:	91 1d       	adc	r25, r1
    1556:	95 95       	asr	r25
    1558:	87 95       	ror	r24
    155a:	80 93 30 01 	sts	0x0130, r24
    155e:	20 91 35 01 	lds	r18, 0x0135
    1562:	80 91 2d 01 	lds	r24, 0x012D
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	82 0f       	add	r24, r18
    156a:	91 1d       	adc	r25, r1
    156c:	95 95       	asr	r25
    156e:	87 95       	ror	r24
    1570:	80 93 31 01 	sts	0x0131, r24
    1574:	20 91 36 01 	lds	r18, 0x0136
    1578:	80 91 2e 01 	lds	r24, 0x012E
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	82 0f       	add	r24, r18
    1580:	91 1d       	adc	r25, r1
    1582:	95 95       	asr	r25
    1584:	87 95       	ror	r24
    1586:	80 93 32 01 	sts	0x0132, r24
    158a:	c0 e0       	ldi	r28, 0x00	; 0
    158c:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    158e:	fe 01       	movw	r30, r28
    1590:	e1 5d       	subi	r30, 0xD1	; 209
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	ce 01       	movw	r24, r28
    1596:	60 81       	ld	r22, Z
    1598:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__eewr_byte_m16>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    159c:	21 96       	adiw	r28, 0x01	; 1
    159e:	c4 30       	cpi	r28, 0x04	; 4
    15a0:	d1 05       	cpc	r29, r1
    15a2:	a9 f7       	brne	.-22     	; 0x158e <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <__subsf3>:
    15aa:	50 58       	subi	r21, 0x80	; 128

000015ac <__addsf3>:
    15ac:	bb 27       	eor	r27, r27
    15ae:	aa 27       	eor	r26, r26
    15b0:	0e d0       	rcall	.+28     	; 0x15ce <__addsf3x>
    15b2:	75 c1       	rjmp	.+746    	; 0x189e <__fp_round>
    15b4:	66 d1       	rcall	.+716    	; 0x1882 <__fp_pscA>
    15b6:	30 f0       	brcs	.+12     	; 0x15c4 <__addsf3+0x18>
    15b8:	6b d1       	rcall	.+726    	; 0x1890 <__fp_pscB>
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <__addsf3+0x18>
    15bc:	31 f4       	brne	.+12     	; 0x15ca <__addsf3+0x1e>
    15be:	9f 3f       	cpi	r25, 0xFF	; 255
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <__addsf3+0x1a>
    15c2:	1e f4       	brtc	.+6      	; 0x15ca <__addsf3+0x1e>
    15c4:	5b c1       	rjmp	.+694    	; 0x187c <__fp_nan>
    15c6:	0e f4       	brtc	.+2      	; 0x15ca <__addsf3+0x1e>
    15c8:	e0 95       	com	r30
    15ca:	e7 fb       	bst	r30, 7
    15cc:	51 c1       	rjmp	.+674    	; 0x1870 <__fp_inf>

000015ce <__addsf3x>:
    15ce:	e9 2f       	mov	r30, r25
    15d0:	77 d1       	rcall	.+750    	; 0x18c0 <__fp_split3>
    15d2:	80 f3       	brcs	.-32     	; 0x15b4 <__addsf3+0x8>
    15d4:	ba 17       	cp	r27, r26
    15d6:	62 07       	cpc	r22, r18
    15d8:	73 07       	cpc	r23, r19
    15da:	84 07       	cpc	r24, r20
    15dc:	95 07       	cpc	r25, r21
    15de:	18 f0       	brcs	.+6      	; 0x15e6 <__addsf3x+0x18>
    15e0:	71 f4       	brne	.+28     	; 0x15fe <__addsf3x+0x30>
    15e2:	9e f5       	brtc	.+102    	; 0x164a <__addsf3x+0x7c>
    15e4:	8f c1       	rjmp	.+798    	; 0x1904 <__fp_zero>
    15e6:	0e f4       	brtc	.+2      	; 0x15ea <__addsf3x+0x1c>
    15e8:	e0 95       	com	r30
    15ea:	0b 2e       	mov	r0, r27
    15ec:	ba 2f       	mov	r27, r26
    15ee:	a0 2d       	mov	r26, r0
    15f0:	0b 01       	movw	r0, r22
    15f2:	b9 01       	movw	r22, r18
    15f4:	90 01       	movw	r18, r0
    15f6:	0c 01       	movw	r0, r24
    15f8:	ca 01       	movw	r24, r20
    15fa:	a0 01       	movw	r20, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	ff 27       	eor	r31, r31
    1600:	59 1b       	sub	r21, r25
    1602:	99 f0       	breq	.+38     	; 0x162a <__addsf3x+0x5c>
    1604:	59 3f       	cpi	r21, 0xF9	; 249
    1606:	50 f4       	brcc	.+20     	; 0x161c <__addsf3x+0x4e>
    1608:	50 3e       	cpi	r21, 0xE0	; 224
    160a:	68 f1       	brcs	.+90     	; 0x1666 <__addsf3x+0x98>
    160c:	1a 16       	cp	r1, r26
    160e:	f0 40       	sbci	r31, 0x00	; 0
    1610:	a2 2f       	mov	r26, r18
    1612:	23 2f       	mov	r18, r19
    1614:	34 2f       	mov	r19, r20
    1616:	44 27       	eor	r20, r20
    1618:	58 5f       	subi	r21, 0xF8	; 248
    161a:	f3 cf       	rjmp	.-26     	; 0x1602 <__addsf3x+0x34>
    161c:	46 95       	lsr	r20
    161e:	37 95       	ror	r19
    1620:	27 95       	ror	r18
    1622:	a7 95       	ror	r26
    1624:	f0 40       	sbci	r31, 0x00	; 0
    1626:	53 95       	inc	r21
    1628:	c9 f7       	brne	.-14     	; 0x161c <__addsf3x+0x4e>
    162a:	7e f4       	brtc	.+30     	; 0x164a <__addsf3x+0x7c>
    162c:	1f 16       	cp	r1, r31
    162e:	ba 0b       	sbc	r27, r26
    1630:	62 0b       	sbc	r22, r18
    1632:	73 0b       	sbc	r23, r19
    1634:	84 0b       	sbc	r24, r20
    1636:	ba f0       	brmi	.+46     	; 0x1666 <__addsf3x+0x98>
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	a1 f0       	breq	.+40     	; 0x1664 <__addsf3x+0x96>
    163c:	ff 0f       	add	r31, r31
    163e:	bb 1f       	adc	r27, r27
    1640:	66 1f       	adc	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	c2 f7       	brpl	.-16     	; 0x1638 <__addsf3x+0x6a>
    1648:	0e c0       	rjmp	.+28     	; 0x1666 <__addsf3x+0x98>
    164a:	ba 0f       	add	r27, r26
    164c:	62 1f       	adc	r22, r18
    164e:	73 1f       	adc	r23, r19
    1650:	84 1f       	adc	r24, r20
    1652:	48 f4       	brcc	.+18     	; 0x1666 <__addsf3x+0x98>
    1654:	87 95       	ror	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b7 95       	ror	r27
    165c:	f7 95       	ror	r31
    165e:	9e 3f       	cpi	r25, 0xFE	; 254
    1660:	08 f0       	brcs	.+2      	; 0x1664 <__addsf3x+0x96>
    1662:	b3 cf       	rjmp	.-154    	; 0x15ca <__addsf3+0x1e>
    1664:	93 95       	inc	r25
    1666:	88 0f       	add	r24, r24
    1668:	08 f0       	brcs	.+2      	; 0x166c <__addsf3x+0x9e>
    166a:	99 27       	eor	r25, r25
    166c:	ee 0f       	add	r30, r30
    166e:	97 95       	ror	r25
    1670:	87 95       	ror	r24
    1672:	08 95       	ret

00001674 <__cmpsf2>:
    1674:	d9 d0       	rcall	.+434    	; 0x1828 <__fp_cmp>
    1676:	08 f4       	brcc	.+2      	; 0x167a <__cmpsf2+0x6>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	08 95       	ret

0000167c <__divsf3>:
    167c:	0c d0       	rcall	.+24     	; 0x1696 <__divsf3x>
    167e:	0f c1       	rjmp	.+542    	; 0x189e <__fp_round>
    1680:	07 d1       	rcall	.+526    	; 0x1890 <__fp_pscB>
    1682:	40 f0       	brcs	.+16     	; 0x1694 <__divsf3+0x18>
    1684:	fe d0       	rcall	.+508    	; 0x1882 <__fp_pscA>
    1686:	30 f0       	brcs	.+12     	; 0x1694 <__divsf3+0x18>
    1688:	21 f4       	brne	.+8      	; 0x1692 <__divsf3+0x16>
    168a:	5f 3f       	cpi	r21, 0xFF	; 255
    168c:	19 f0       	breq	.+6      	; 0x1694 <__divsf3+0x18>
    168e:	f0 c0       	rjmp	.+480    	; 0x1870 <__fp_inf>
    1690:	51 11       	cpse	r21, r1
    1692:	39 c1       	rjmp	.+626    	; 0x1906 <__fp_szero>
    1694:	f3 c0       	rjmp	.+486    	; 0x187c <__fp_nan>

00001696 <__divsf3x>:
    1696:	14 d1       	rcall	.+552    	; 0x18c0 <__fp_split3>
    1698:	98 f3       	brcs	.-26     	; 0x1680 <__divsf3+0x4>

0000169a <__divsf3_pse>:
    169a:	99 23       	and	r25, r25
    169c:	c9 f3       	breq	.-14     	; 0x1690 <__divsf3+0x14>
    169e:	55 23       	and	r21, r21
    16a0:	b1 f3       	breq	.-20     	; 0x168e <__divsf3+0x12>
    16a2:	95 1b       	sub	r25, r21
    16a4:	55 0b       	sbc	r21, r21
    16a6:	bb 27       	eor	r27, r27
    16a8:	aa 27       	eor	r26, r26
    16aa:	62 17       	cp	r22, r18
    16ac:	73 07       	cpc	r23, r19
    16ae:	84 07       	cpc	r24, r20
    16b0:	38 f0       	brcs	.+14     	; 0x16c0 <__divsf3_pse+0x26>
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	44 1f       	adc	r20, r20
    16bc:	aa 1f       	adc	r26, r26
    16be:	a9 f3       	breq	.-22     	; 0x16aa <__divsf3_pse+0x10>
    16c0:	33 d0       	rcall	.+102    	; 0x1728 <__divsf3_pse+0x8e>
    16c2:	0e 2e       	mov	r0, r30
    16c4:	3a f0       	brmi	.+14     	; 0x16d4 <__divsf3_pse+0x3a>
    16c6:	e0 e8       	ldi	r30, 0x80	; 128
    16c8:	30 d0       	rcall	.+96     	; 0x172a <__divsf3_pse+0x90>
    16ca:	91 50       	subi	r25, 0x01	; 1
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	e6 95       	lsr	r30
    16d0:	00 1c       	adc	r0, r0
    16d2:	ca f7       	brpl	.-14     	; 0x16c6 <__divsf3_pse+0x2c>
    16d4:	29 d0       	rcall	.+82     	; 0x1728 <__divsf3_pse+0x8e>
    16d6:	fe 2f       	mov	r31, r30
    16d8:	27 d0       	rcall	.+78     	; 0x1728 <__divsf3_pse+0x8e>
    16da:	66 0f       	add	r22, r22
    16dc:	77 1f       	adc	r23, r23
    16de:	88 1f       	adc	r24, r24
    16e0:	bb 1f       	adc	r27, r27
    16e2:	26 17       	cp	r18, r22
    16e4:	37 07       	cpc	r19, r23
    16e6:	48 07       	cpc	r20, r24
    16e8:	ab 07       	cpc	r26, r27
    16ea:	b0 e8       	ldi	r27, 0x80	; 128
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <__divsf3_pse+0x56>
    16ee:	bb 0b       	sbc	r27, r27
    16f0:	80 2d       	mov	r24, r0
    16f2:	bf 01       	movw	r22, r30
    16f4:	ff 27       	eor	r31, r31
    16f6:	93 58       	subi	r25, 0x83	; 131
    16f8:	5f 4f       	sbci	r21, 0xFF	; 255
    16fa:	2a f0       	brmi	.+10     	; 0x1706 <__divsf3_pse+0x6c>
    16fc:	9e 3f       	cpi	r25, 0xFE	; 254
    16fe:	51 05       	cpc	r21, r1
    1700:	68 f0       	brcs	.+26     	; 0x171c <__divsf3_pse+0x82>
    1702:	b6 c0       	rjmp	.+364    	; 0x1870 <__fp_inf>
    1704:	00 c1       	rjmp	.+512    	; 0x1906 <__fp_szero>
    1706:	5f 3f       	cpi	r21, 0xFF	; 255
    1708:	ec f3       	brlt	.-6      	; 0x1704 <__divsf3_pse+0x6a>
    170a:	98 3e       	cpi	r25, 0xE8	; 232
    170c:	dc f3       	brlt	.-10     	; 0x1704 <__divsf3_pse+0x6a>
    170e:	86 95       	lsr	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b7 95       	ror	r27
    1716:	f7 95       	ror	r31
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	c9 f7       	brne	.-14     	; 0x170e <__divsf3_pse+0x74>
    171c:	88 0f       	add	r24, r24
    171e:	91 1d       	adc	r25, r1
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	97 f9       	bld	r25, 7
    1726:	08 95       	ret
    1728:	e1 e0       	ldi	r30, 0x01	; 1
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	88 1f       	adc	r24, r24
    1730:	bb 1f       	adc	r27, r27
    1732:	62 17       	cp	r22, r18
    1734:	73 07       	cpc	r23, r19
    1736:	84 07       	cpc	r24, r20
    1738:	ba 07       	cpc	r27, r26
    173a:	20 f0       	brcs	.+8      	; 0x1744 <__divsf3_pse+0xaa>
    173c:	62 1b       	sub	r22, r18
    173e:	73 0b       	sbc	r23, r19
    1740:	84 0b       	sbc	r24, r20
    1742:	ba 0b       	sbc	r27, r26
    1744:	ee 1f       	adc	r30, r30
    1746:	88 f7       	brcc	.-30     	; 0x172a <__divsf3_pse+0x90>
    1748:	e0 95       	com	r30
    174a:	08 95       	ret

0000174c <__fixsfsi>:
    174c:	04 d0       	rcall	.+8      	; 0x1756 <__fixunssfsi>
    174e:	68 94       	set
    1750:	b1 11       	cpse	r27, r1
    1752:	d9 c0       	rjmp	.+434    	; 0x1906 <__fp_szero>
    1754:	08 95       	ret

00001756 <__fixunssfsi>:
    1756:	bc d0       	rcall	.+376    	; 0x18d0 <__fp_splitA>
    1758:	88 f0       	brcs	.+34     	; 0x177c <__fixunssfsi+0x26>
    175a:	9f 57       	subi	r25, 0x7F	; 127
    175c:	90 f0       	brcs	.+36     	; 0x1782 <__fixunssfsi+0x2c>
    175e:	b9 2f       	mov	r27, r25
    1760:	99 27       	eor	r25, r25
    1762:	b7 51       	subi	r27, 0x17	; 23
    1764:	a0 f0       	brcs	.+40     	; 0x178e <__fixunssfsi+0x38>
    1766:	d1 f0       	breq	.+52     	; 0x179c <__fixunssfsi+0x46>
    1768:	66 0f       	add	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	1a f0       	brmi	.+6      	; 0x1778 <__fixunssfsi+0x22>
    1772:	ba 95       	dec	r27
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__fixunssfsi+0x12>
    1776:	12 c0       	rjmp	.+36     	; 0x179c <__fixunssfsi+0x46>
    1778:	b1 30       	cpi	r27, 0x01	; 1
    177a:	81 f0       	breq	.+32     	; 0x179c <__fixunssfsi+0x46>
    177c:	c3 d0       	rcall	.+390    	; 0x1904 <__fp_zero>
    177e:	b1 e0       	ldi	r27, 0x01	; 1
    1780:	08 95       	ret
    1782:	c0 c0       	rjmp	.+384    	; 0x1904 <__fp_zero>
    1784:	67 2f       	mov	r22, r23
    1786:	78 2f       	mov	r23, r24
    1788:	88 27       	eor	r24, r24
    178a:	b8 5f       	subi	r27, 0xF8	; 248
    178c:	39 f0       	breq	.+14     	; 0x179c <__fixunssfsi+0x46>
    178e:	b9 3f       	cpi	r27, 0xF9	; 249
    1790:	cc f3       	brlt	.-14     	; 0x1784 <__fixunssfsi+0x2e>
    1792:	86 95       	lsr	r24
    1794:	77 95       	ror	r23
    1796:	67 95       	ror	r22
    1798:	b3 95       	inc	r27
    179a:	d9 f7       	brne	.-10     	; 0x1792 <__fixunssfsi+0x3c>
    179c:	3e f4       	brtc	.+14     	; 0x17ac <__fixunssfsi+0x56>
    179e:	90 95       	com	r25
    17a0:	80 95       	com	r24
    17a2:	70 95       	com	r23
    17a4:	61 95       	neg	r22
    17a6:	7f 4f       	sbci	r23, 0xFF	; 255
    17a8:	8f 4f       	sbci	r24, 0xFF	; 255
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <__floatunsisf>:
    17ae:	e8 94       	clt
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <__floatsisf+0x12>

000017b2 <__floatsisf>:
    17b2:	97 fb       	bst	r25, 7
    17b4:	3e f4       	brtc	.+14     	; 0x17c4 <__floatsisf+0x12>
    17b6:	90 95       	com	r25
    17b8:	80 95       	com	r24
    17ba:	70 95       	com	r23
    17bc:	61 95       	neg	r22
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	8f 4f       	sbci	r24, 0xFF	; 255
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	99 23       	and	r25, r25
    17c6:	a9 f0       	breq	.+42     	; 0x17f2 <__floatsisf+0x40>
    17c8:	f9 2f       	mov	r31, r25
    17ca:	96 e9       	ldi	r25, 0x96	; 150
    17cc:	bb 27       	eor	r27, r27
    17ce:	93 95       	inc	r25
    17d0:	f6 95       	lsr	r31
    17d2:	87 95       	ror	r24
    17d4:	77 95       	ror	r23
    17d6:	67 95       	ror	r22
    17d8:	b7 95       	ror	r27
    17da:	f1 11       	cpse	r31, r1
    17dc:	f8 cf       	rjmp	.-16     	; 0x17ce <__floatsisf+0x1c>
    17de:	fa f4       	brpl	.+62     	; 0x181e <__floatsisf+0x6c>
    17e0:	bb 0f       	add	r27, r27
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <__floatsisf+0x36>
    17e4:	60 ff       	sbrs	r22, 0
    17e6:	1b c0       	rjmp	.+54     	; 0x181e <__floatsisf+0x6c>
    17e8:	6f 5f       	subi	r22, 0xFF	; 255
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	8f 4f       	sbci	r24, 0xFF	; 255
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	16 c0       	rjmp	.+44     	; 0x181e <__floatsisf+0x6c>
    17f2:	88 23       	and	r24, r24
    17f4:	11 f0       	breq	.+4      	; 0x17fa <__floatsisf+0x48>
    17f6:	96 e9       	ldi	r25, 0x96	; 150
    17f8:	11 c0       	rjmp	.+34     	; 0x181c <__floatsisf+0x6a>
    17fa:	77 23       	and	r23, r23
    17fc:	21 f0       	breq	.+8      	; 0x1806 <__floatsisf+0x54>
    17fe:	9e e8       	ldi	r25, 0x8E	; 142
    1800:	87 2f       	mov	r24, r23
    1802:	76 2f       	mov	r23, r22
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <__floatsisf+0x5e>
    1806:	66 23       	and	r22, r22
    1808:	71 f0       	breq	.+28     	; 0x1826 <__floatsisf+0x74>
    180a:	96 e8       	ldi	r25, 0x86	; 134
    180c:	86 2f       	mov	r24, r22
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	2a f0       	brmi	.+10     	; 0x181e <__floatsisf+0x6c>
    1814:	9a 95       	dec	r25
    1816:	66 0f       	add	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	da f7       	brpl	.-10     	; 0x1814 <__floatsisf+0x62>
    181e:	88 0f       	add	r24, r24
    1820:	96 95       	lsr	r25
    1822:	87 95       	ror	r24
    1824:	97 f9       	bld	r25, 7
    1826:	08 95       	ret

00001828 <__fp_cmp>:
    1828:	99 0f       	add	r25, r25
    182a:	00 08       	sbc	r0, r0
    182c:	55 0f       	add	r21, r21
    182e:	aa 0b       	sbc	r26, r26
    1830:	e0 e8       	ldi	r30, 0x80	; 128
    1832:	fe ef       	ldi	r31, 0xFE	; 254
    1834:	16 16       	cp	r1, r22
    1836:	17 06       	cpc	r1, r23
    1838:	e8 07       	cpc	r30, r24
    183a:	f9 07       	cpc	r31, r25
    183c:	c0 f0       	brcs	.+48     	; 0x186e <__fp_cmp+0x46>
    183e:	12 16       	cp	r1, r18
    1840:	13 06       	cpc	r1, r19
    1842:	e4 07       	cpc	r30, r20
    1844:	f5 07       	cpc	r31, r21
    1846:	98 f0       	brcs	.+38     	; 0x186e <__fp_cmp+0x46>
    1848:	62 1b       	sub	r22, r18
    184a:	73 0b       	sbc	r23, r19
    184c:	84 0b       	sbc	r24, r20
    184e:	95 0b       	sbc	r25, r21
    1850:	39 f4       	brne	.+14     	; 0x1860 <__fp_cmp+0x38>
    1852:	0a 26       	eor	r0, r26
    1854:	61 f0       	breq	.+24     	; 0x186e <__fp_cmp+0x46>
    1856:	23 2b       	or	r18, r19
    1858:	24 2b       	or	r18, r20
    185a:	25 2b       	or	r18, r21
    185c:	21 f4       	brne	.+8      	; 0x1866 <__fp_cmp+0x3e>
    185e:	08 95       	ret
    1860:	0a 26       	eor	r0, r26
    1862:	09 f4       	brne	.+2      	; 0x1866 <__fp_cmp+0x3e>
    1864:	a1 40       	sbci	r26, 0x01	; 1
    1866:	a6 95       	lsr	r26
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	81 1d       	adc	r24, r1
    186c:	81 1d       	adc	r24, r1
    186e:	08 95       	ret

00001870 <__fp_inf>:
    1870:	97 f9       	bld	r25, 7
    1872:	9f 67       	ori	r25, 0x7F	; 127
    1874:	80 e8       	ldi	r24, 0x80	; 128
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	08 95       	ret

0000187c <__fp_nan>:
    187c:	9f ef       	ldi	r25, 0xFF	; 255
    187e:	80 ec       	ldi	r24, 0xC0	; 192
    1880:	08 95       	ret

00001882 <__fp_pscA>:
    1882:	00 24       	eor	r0, r0
    1884:	0a 94       	dec	r0
    1886:	16 16       	cp	r1, r22
    1888:	17 06       	cpc	r1, r23
    188a:	18 06       	cpc	r1, r24
    188c:	09 06       	cpc	r0, r25
    188e:	08 95       	ret

00001890 <__fp_pscB>:
    1890:	00 24       	eor	r0, r0
    1892:	0a 94       	dec	r0
    1894:	12 16       	cp	r1, r18
    1896:	13 06       	cpc	r1, r19
    1898:	14 06       	cpc	r1, r20
    189a:	05 06       	cpc	r0, r21
    189c:	08 95       	ret

0000189e <__fp_round>:
    189e:	09 2e       	mov	r0, r25
    18a0:	03 94       	inc	r0
    18a2:	00 0c       	add	r0, r0
    18a4:	11 f4       	brne	.+4      	; 0x18aa <__fp_round+0xc>
    18a6:	88 23       	and	r24, r24
    18a8:	52 f0       	brmi	.+20     	; 0x18be <__fp_round+0x20>
    18aa:	bb 0f       	add	r27, r27
    18ac:	40 f4       	brcc	.+16     	; 0x18be <__fp_round+0x20>
    18ae:	bf 2b       	or	r27, r31
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <__fp_round+0x18>
    18b2:	60 ff       	sbrs	r22, 0
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <__fp_round+0x20>
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	8f 4f       	sbci	r24, 0xFF	; 255
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	08 95       	ret

000018c0 <__fp_split3>:
    18c0:	57 fd       	sbrc	r21, 7
    18c2:	90 58       	subi	r25, 0x80	; 128
    18c4:	44 0f       	add	r20, r20
    18c6:	55 1f       	adc	r21, r21
    18c8:	59 f0       	breq	.+22     	; 0x18e0 <__fp_splitA+0x10>
    18ca:	5f 3f       	cpi	r21, 0xFF	; 255
    18cc:	71 f0       	breq	.+28     	; 0x18ea <__fp_splitA+0x1a>
    18ce:	47 95       	ror	r20

000018d0 <__fp_splitA>:
    18d0:	88 0f       	add	r24, r24
    18d2:	97 fb       	bst	r25, 7
    18d4:	99 1f       	adc	r25, r25
    18d6:	61 f0       	breq	.+24     	; 0x18f0 <__fp_splitA+0x20>
    18d8:	9f 3f       	cpi	r25, 0xFF	; 255
    18da:	79 f0       	breq	.+30     	; 0x18fa <__fp_splitA+0x2a>
    18dc:	87 95       	ror	r24
    18de:	08 95       	ret
    18e0:	12 16       	cp	r1, r18
    18e2:	13 06       	cpc	r1, r19
    18e4:	14 06       	cpc	r1, r20
    18e6:	55 1f       	adc	r21, r21
    18e8:	f2 cf       	rjmp	.-28     	; 0x18ce <__fp_split3+0xe>
    18ea:	46 95       	lsr	r20
    18ec:	f1 df       	rcall	.-30     	; 0x18d0 <__fp_splitA>
    18ee:	08 c0       	rjmp	.+16     	; 0x1900 <__fp_splitA+0x30>
    18f0:	16 16       	cp	r1, r22
    18f2:	17 06       	cpc	r1, r23
    18f4:	18 06       	cpc	r1, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	f1 cf       	rjmp	.-30     	; 0x18dc <__fp_splitA+0xc>
    18fa:	86 95       	lsr	r24
    18fc:	71 05       	cpc	r23, r1
    18fe:	61 05       	cpc	r22, r1
    1900:	08 94       	sec
    1902:	08 95       	ret

00001904 <__fp_zero>:
    1904:	e8 94       	clt

00001906 <__fp_szero>:
    1906:	bb 27       	eor	r27, r27
    1908:	66 27       	eor	r22, r22
    190a:	77 27       	eor	r23, r23
    190c:	cb 01       	movw	r24, r22
    190e:	97 f9       	bld	r25, 7
    1910:	08 95       	ret

00001912 <__gesf2>:
    1912:	8a df       	rcall	.-236    	; 0x1828 <__fp_cmp>
    1914:	08 f4       	brcc	.+2      	; 0x1918 <__gesf2+0x6>
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	08 95       	ret

0000191a <__mulsf3>:
    191a:	0b d0       	rcall	.+22     	; 0x1932 <__mulsf3x>
    191c:	c0 cf       	rjmp	.-128    	; 0x189e <__fp_round>
    191e:	b1 df       	rcall	.-158    	; 0x1882 <__fp_pscA>
    1920:	28 f0       	brcs	.+10     	; 0x192c <__mulsf3+0x12>
    1922:	b6 df       	rcall	.-148    	; 0x1890 <__fp_pscB>
    1924:	18 f0       	brcs	.+6      	; 0x192c <__mulsf3+0x12>
    1926:	95 23       	and	r25, r21
    1928:	09 f0       	breq	.+2      	; 0x192c <__mulsf3+0x12>
    192a:	a2 cf       	rjmp	.-188    	; 0x1870 <__fp_inf>
    192c:	a7 cf       	rjmp	.-178    	; 0x187c <__fp_nan>
    192e:	11 24       	eor	r1, r1
    1930:	ea cf       	rjmp	.-44     	; 0x1906 <__fp_szero>

00001932 <__mulsf3x>:
    1932:	c6 df       	rcall	.-116    	; 0x18c0 <__fp_split3>
    1934:	a0 f3       	brcs	.-24     	; 0x191e <__mulsf3+0x4>

00001936 <__mulsf3_pse>:
    1936:	95 9f       	mul	r25, r21
    1938:	d1 f3       	breq	.-12     	; 0x192e <__mulsf3+0x14>
    193a:	95 0f       	add	r25, r21
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	55 1f       	adc	r21, r21
    1940:	62 9f       	mul	r22, r18
    1942:	f0 01       	movw	r30, r0
    1944:	72 9f       	mul	r23, r18
    1946:	bb 27       	eor	r27, r27
    1948:	f0 0d       	add	r31, r0
    194a:	b1 1d       	adc	r27, r1
    194c:	63 9f       	mul	r22, r19
    194e:	aa 27       	eor	r26, r26
    1950:	f0 0d       	add	r31, r0
    1952:	b1 1d       	adc	r27, r1
    1954:	aa 1f       	adc	r26, r26
    1956:	64 9f       	mul	r22, r20
    1958:	66 27       	eor	r22, r22
    195a:	b0 0d       	add	r27, r0
    195c:	a1 1d       	adc	r26, r1
    195e:	66 1f       	adc	r22, r22
    1960:	82 9f       	mul	r24, r18
    1962:	22 27       	eor	r18, r18
    1964:	b0 0d       	add	r27, r0
    1966:	a1 1d       	adc	r26, r1
    1968:	62 1f       	adc	r22, r18
    196a:	73 9f       	mul	r23, r19
    196c:	b0 0d       	add	r27, r0
    196e:	a1 1d       	adc	r26, r1
    1970:	62 1f       	adc	r22, r18
    1972:	83 9f       	mul	r24, r19
    1974:	a0 0d       	add	r26, r0
    1976:	61 1d       	adc	r22, r1
    1978:	22 1f       	adc	r18, r18
    197a:	74 9f       	mul	r23, r20
    197c:	33 27       	eor	r19, r19
    197e:	a0 0d       	add	r26, r0
    1980:	61 1d       	adc	r22, r1
    1982:	23 1f       	adc	r18, r19
    1984:	84 9f       	mul	r24, r20
    1986:	60 0d       	add	r22, r0
    1988:	21 1d       	adc	r18, r1
    198a:	82 2f       	mov	r24, r18
    198c:	76 2f       	mov	r23, r22
    198e:	6a 2f       	mov	r22, r26
    1990:	11 24       	eor	r1, r1
    1992:	9f 57       	subi	r25, 0x7F	; 127
    1994:	50 40       	sbci	r21, 0x00	; 0
    1996:	8a f0       	brmi	.+34     	; 0x19ba <__mulsf3_pse+0x84>
    1998:	e1 f0       	breq	.+56     	; 0x19d2 <__mulsf3_pse+0x9c>
    199a:	88 23       	and	r24, r24
    199c:	4a f0       	brmi	.+18     	; 0x19b0 <__mulsf3_pse+0x7a>
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	bb 1f       	adc	r27, r27
    19a4:	66 1f       	adc	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	91 50       	subi	r25, 0x01	; 1
    19ac:	50 40       	sbci	r21, 0x00	; 0
    19ae:	a9 f7       	brne	.-22     	; 0x199a <__mulsf3_pse+0x64>
    19b0:	9e 3f       	cpi	r25, 0xFE	; 254
    19b2:	51 05       	cpc	r21, r1
    19b4:	70 f0       	brcs	.+28     	; 0x19d2 <__mulsf3_pse+0x9c>
    19b6:	5c cf       	rjmp	.-328    	; 0x1870 <__fp_inf>
    19b8:	a6 cf       	rjmp	.-180    	; 0x1906 <__fp_szero>
    19ba:	5f 3f       	cpi	r21, 0xFF	; 255
    19bc:	ec f3       	brlt	.-6      	; 0x19b8 <__mulsf3_pse+0x82>
    19be:	98 3e       	cpi	r25, 0xE8	; 232
    19c0:	dc f3       	brlt	.-10     	; 0x19b8 <__mulsf3_pse+0x82>
    19c2:	86 95       	lsr	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	b7 95       	ror	r27
    19ca:	f7 95       	ror	r31
    19cc:	e7 95       	ror	r30
    19ce:	9f 5f       	subi	r25, 0xFF	; 255
    19d0:	c1 f7       	brne	.-16     	; 0x19c2 <__mulsf3_pse+0x8c>
    19d2:	fe 2b       	or	r31, r30
    19d4:	88 0f       	add	r24, r24
    19d6:	91 1d       	adc	r25, r1
    19d8:	96 95       	lsr	r25
    19da:	87 95       	ror	r24
    19dc:	97 f9       	bld	r25, 7
    19de:	08 95       	ret

000019e0 <__divmodhi4>:
    19e0:	97 fb       	bst	r25, 7
    19e2:	09 2e       	mov	r0, r25
    19e4:	07 26       	eor	r0, r23
    19e6:	0a d0       	rcall	.+20     	; 0x19fc <__divmodhi4_neg1>
    19e8:	77 fd       	sbrc	r23, 7
    19ea:	04 d0       	rcall	.+8      	; 0x19f4 <__divmodhi4_neg2>
    19ec:	0c d0       	rcall	.+24     	; 0x1a06 <__udivmodhi4>
    19ee:	06 d0       	rcall	.+12     	; 0x19fc <__divmodhi4_neg1>
    19f0:	00 20       	and	r0, r0
    19f2:	1a f4       	brpl	.+6      	; 0x19fa <__divmodhi4_exit>

000019f4 <__divmodhi4_neg2>:
    19f4:	70 95       	com	r23
    19f6:	61 95       	neg	r22
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255

000019fa <__divmodhi4_exit>:
    19fa:	08 95       	ret

000019fc <__divmodhi4_neg1>:
    19fc:	f6 f7       	brtc	.-4      	; 0x19fa <__divmodhi4_exit>
    19fe:	90 95       	com	r25
    1a00:	81 95       	neg	r24
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	08 95       	ret

00001a06 <__udivmodhi4>:
    1a06:	aa 1b       	sub	r26, r26
    1a08:	bb 1b       	sub	r27, r27
    1a0a:	51 e1       	ldi	r21, 0x11	; 17
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <__udivmodhi4_ep>

00001a0e <__udivmodhi4_loop>:
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	a6 17       	cp	r26, r22
    1a14:	b7 07       	cpc	r27, r23
    1a16:	10 f0       	brcs	.+4      	; 0x1a1c <__udivmodhi4_ep>
    1a18:	a6 1b       	sub	r26, r22
    1a1a:	b7 0b       	sbc	r27, r23

00001a1c <__udivmodhi4_ep>:
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	5a 95       	dec	r21
    1a22:	a9 f7       	brne	.-22     	; 0x1a0e <__udivmodhi4_loop>
    1a24:	80 95       	com	r24
    1a26:	90 95       	com	r25
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	08 95       	ret

00001a2e <__eerd_byte_m16>:
    1a2e:	e1 99       	sbic	0x1c, 1	; 28
    1a30:	fe cf       	rjmp	.-4      	; 0x1a2e <__eerd_byte_m16>
    1a32:	9f bb       	out	0x1f, r25	; 31
    1a34:	8e bb       	out	0x1e, r24	; 30
    1a36:	e0 9a       	sbi	0x1c, 0	; 28
    1a38:	99 27       	eor	r25, r25
    1a3a:	8d b3       	in	r24, 0x1d	; 29
    1a3c:	08 95       	ret

00001a3e <__eewr_byte_m16>:
    1a3e:	26 2f       	mov	r18, r22

00001a40 <__eewr_r18_m16>:
    1a40:	e1 99       	sbic	0x1c, 1	; 28
    1a42:	fe cf       	rjmp	.-4      	; 0x1a40 <__eewr_r18_m16>
    1a44:	9f bb       	out	0x1f, r25	; 31
    1a46:	8e bb       	out	0x1e, r24	; 30
    1a48:	2d bb       	out	0x1d, r18	; 29
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	e2 9a       	sbi	0x1c, 2	; 28
    1a50:	e1 9a       	sbi	0x1c, 1	; 28
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	08 95       	ret

00001a58 <_exit>:
    1a58:	f8 94       	cli

00001a5a <__stop_program>:
    1a5a:	ff cf       	rjmp	.-2      	; 0x1a5a <__stop_program>
